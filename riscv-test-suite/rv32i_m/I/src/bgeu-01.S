
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.1
// timestamp : Tue Dec 15 15:36:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the bgeu instruction of the RISC-V I extension for the bgeu covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",bgeu)
RVTEST_SIGBASE(x9, signature_x9_1)
inst_0:
TEST_BRANCH_OP(bgeu, x5, x2, x2, 0x8, 0x8, 0x0, 1b, x9, 0,0)
inst_2:
TEST_BRANCH_OP(bgeu, x5, x21, x25, 0xffff, 0xffff, 0x0, 1b, x9, 8,0)
inst_3:
TEST_BRANCH_OP(bgeu, x5, x27, x13, 0xfffbffff, 0xffefffff, 0x8, 3f, x9, 12,0)
inst_4:
TEST_BRANCH_OP(bgeu, x5, x14, x29, 0xaaaaaaab, 0x4, 0x6, 1b, x9, 16,0)
inst_6:
TEST_BRANCH_OP(bgeu, x5, x11, x19, 0xaaaaaaa9, 0x1, 0x40, 3f, x9, 24,0)
inst_7:
TEST_BRANCH_OP(bgeu, x5, x10, x21, 0xaaaaaaaa, 0x2, 0x40, 3f, x9, 28,0)
inst_9:
TEST_BRANCH_OP(bgeu, x5, x3, x27, 0xffff, 0x10, 0x2, 1b, x9, 36,0)
inst_10:
TEST_BRANCH_OP(bgeu, x5, x25, x28, 0x6, 0x20, 0x8, 1b, x9, 40,0)
inst_11:
TEST_BRANCH_OP(bgeu, x5, x30, x0, 0xfffff7ff, 0x0, 0x8, 1b, x9, 44,0)
inst_14:
TEST_BRANCH_OP(bgeu, x5, x22, x7, 0xb504, 0x200, 0x4, 3f, x9, 56,0)
inst_15:
TEST_BRANCH_OP(bgeu, x5, x24, x26, 0x4000, 0x400, 0x40, 3f, x9, 60,0)
inst_16:
TEST_BRANCH_OP(bgeu, x5, x6, x22, 0x80000, 0x800, 0x40, 3f, x9, 64,0)
inst_17:
TEST_BRANCH_OP(bgeu, x5, x4, x18, 0x8, 0x1000, 0x0, 1b, x9, 68,0)
inst_18:
TEST_BRANCH_OP(bgeu, x5, x1, x30, 0xb505, 0x2000, 0x2, 1b, x9, 72,0)
inst_19:
TEST_BRANCH_OP(bgeu, x3, x5, x12, 0xaaaaaaaa, 0x4000, 0x6, 1b, x9, 76,0)
RVTEST_SIGBASE(x2, signature_x2_0)
inst_20:
TEST_BRANCH_OP(bgeu, x3, x16, x1, 0x2000000, 0x8000, 0x2, 1b, x2, 0,0)
inst_21:
TEST_BRANCH_OP(bgeu, x3, x26, x31, 0xfffff7ff, 0x10000, 0x6, 3f, x2, 4,0)
inst_22:
TEST_BRANCH_OP(bgeu, x3, x28, x10, 0xbfffffff, 0x20000, 0x6, 1b, x2, 8,0)
inst_25:
TEST_BRANCH_OP(bgeu, x3, x18, x14, 0x55555556, 0x100000, 0x20, 3f, x2, 20,0)
inst_26:
TEST_BRANCH_OP(bgeu, x3, x17, x15, 0x1, 0x200000, 0x40, 3f, x2, 24,0)
inst_29:
TEST_BRANCH_OP(bgeu, x3, x13, x4, 0xfffffbff, 0x1000000, 0x6, 3f, x2, 36,0)
inst_31:
TEST_BRANCH_OP(bgeu, x3, x8, x9, 0x3, 0x4000000, 0x2, 1b, x2, 44,0)
inst_32:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff7fff, 0x8000000, 0x0, 1b, x2, 48,0)
inst_33:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x10000000, 0x40, 3f, x2, 52,0)
inst_34:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xdfffffff, 0x20000000, 0x4, 1b, x2, 56,0)
inst_35:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x40000000, 0x2, 1b, x2, 60,0)
inst_37:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x800000, 0xfffffffe, 0x4, 3f, x2, 68,0)
inst_38:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffff7ff, 0xfffffffd, 0x6, 3f, x2, 72,0)
inst_39:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xfffffffb, 0x2, 1b, x2, 76,0)
inst_40:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x8000000, 0xfffffff7, 0x2, 3f, x2, 80,0)
inst_41:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xffffffef, 0x40, 3f, x2, 84,0)
inst_42:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0xffffffdf, 0x8, 3f, x2, 88,0)
inst_44:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xfffffeff, 0x6, 1b, x2, 96,0)
inst_45:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4000000, 0xfffffdff, 0x0, 1b, x2, 100,0)
inst_46:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xfffff7ff, 0x8, 3f, x2, 104,0)
inst_47:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xbfffffff, 0xffffefff, 0x8, 3f, x2, 108,0)
inst_49:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x8, 0xffffbfff, 0x10, 3f, x2, 116,0)
inst_50:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffffeff, 0xffff7fff, 0x20, 3f, x2, 120,0)
inst_55:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4000000, 0xffdfffff, 0x80, 3f, x2, 140,0)
inst_56:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffffdfff, 0xffbfffff, 0xa, 1b, x2, 144,0)
inst_57:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1000000, 0xff7fffff, 0x0, 1b, x2, 148,0)
inst_58:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffffefff, 0xfeffffff, 0x8, 1b, x2, 152,0)
inst_59:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xfdffffff, 0x4, 3f, x2, 156,0)
inst_62:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4000, 0xefffffff, 0x0, 3f, x2, 168,0)
inst_63:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xdfffffff, 0x4, 1b, x2, 172,0)
inst_64:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xbfffffff, 0x40, 3f, x2, 176,0)
inst_65:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x8000000, 0x7fffffff, 0x2, 1b, x2, 180,0)
inst_66:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x200000, 0x55555555, 0x4, 3f, x2, 184,0)
inst_67:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffffbff, 0xaaaaaaaa, 0x0, 3f, x2, 188,0)
inst_68:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10, 0x20, 0x40, 3f, x2, 192,0)
inst_70:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x40, 0xf7ffffff, 0x0, 3f, x2, 200,0)
inst_73:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x400, 0xffffbfff, 0x2, 1b, x2, 212,0)
inst_75:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1000, 0x1000, 0x4, 3f, x2, 220,0)
inst_77:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x8000, 0xfffff7ff, 0x6, 1b, x2, 228,0)
inst_78:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x55555555, 0x2, 3f, x2, 232,0)
inst_79:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x20000, 0x20000, 0x2, 3f, x2, 236,0)
inst_80:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x40000, 0x8000000, 0x10, 3f, x2, 240,0)
inst_81:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x100000, 0x9, 0x10, 3f, x2, 244,0)
inst_83:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000000, 0x55555555, 0x0, 1b, x2, 252,0)
inst_85:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x40000000, 0xffffffbf, 0xa, 1b, x2, 260,0)
inst_87:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffffffd, 0xfffffffd, 0x40, 3f, x2, 268,0)
inst_88:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffffffb, 0x40, 0x40, 3f, x2, 272,0)
inst_89:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffffff7, 0xaaaaaaaa, 0x6, 1b, x2, 276,0)
inst_91:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffffffdf, 0x1, 0x6, 1b, x2, 284,0)
inst_92:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffeffff, 0xffffbfff, 0x10, 3f, x2, 288,0)
inst_95:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffefffff, 0x2, 0x6, 3f, x2, 300,0)
inst_96:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffdfffff, 0xfffdffff, 0x8, 3f, x2, 304,0)
inst_98:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xff7fffff, 0xffffffef, 0xa, 1b, x2, 312,0)
inst_99:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfeffffff, 0x100, 0x0, 3f, x2, 316,0)
inst_100:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfbffffff, 0xffff, 0x2, 3f, x2, 320,0)
inst_101:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xf7ffffff, 0xaaaaaaaa, 0x4, 1b, x2, 324,0)
inst_102:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xefffffff, 0x12, 0xa, 1b, x2, 328,0)
inst_104:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x3, 0x4, 1b, x2, 336,0)
inst_105:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x55555555, 0xa, 1b, x2, 340,0)
inst_107:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x5, 0x4, 1b, x2, 348,0)
inst_108:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x33333333, 0x2, 1b, x2, 352,0)
inst_109:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x66666666, 0x6, 3f, x2, 356,0)
inst_111:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x0, 0x4, 3f, x2, 364,0)
inst_112:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0xffff, 0x0, 3f, x2, 368,0)
inst_113:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x2, 0x40, 3f, x2, 372,0)
inst_115:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0xaaaaaaa9, 0x10, 3f, x2, 380,0)
inst_116:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x4, 0x10, 3f, x2, 384,0)
inst_117:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x33333332, 0x2, 3f, x2, 388,0)
inst_119:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0xb503, 0xa, 1b, x2, 396,0)
inst_120:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0xfffe, 0x4, 1b, x2, 400,0)
inst_121:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x55555556, 0x6, 1b, x2, 404,0)
inst_122:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0xaaaaaaab, 0x4, 3f, x2, 408,0)
inst_124:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x33333334, 0xa, 1b, x2, 416,0)
inst_125:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x66666667, 0x40, 3f, x2, 420,0)
inst_127:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x1, 0x6, 1b, x2, 428,0)
inst_128:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x3, 0x10000, 0x8, 1b, x2, 432,0)
inst_129:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x3, 0x10, 3f, x2, 436,0)
inst_130:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x55555555, 0x2, 3f, x2, 440,0)
inst_132:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x5, 0x8, 1b, x2, 448,0)
inst_133:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x33333333, 0x0, 1b, x2, 452,0)
inst_134:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x66666666, 0x20, 3f, x2, 456,0)
inst_135:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0xb504, 0x4, 1b, x2, 460,0)
inst_136:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x0, 0x4, 1b, x2, 464,0)
inst_137:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0xffff, 0x40, 3f, x2, 468,0)
inst_138:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x2, 0x8, 3f, x2, 472,0)
inst_139:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x55555554, 0x0, 1b, x2, 476,0)
inst_140:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0xaaaaaaa9, 0x8, 3f, x2, 480,0)
inst_141:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x4, 0x20, 3f, x2, 484,0)
inst_142:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x33333332, 0x10, 3f, x2, 488,0)
inst_143:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x66666665, 0x10, 3f, x2, 492,0)
inst_144:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0xb503, 0x4, 3f, x2, 496,0)
inst_145:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0xfffe, 0x2, 3f, x2, 500,0)
inst_146:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x55555556, 0x2, 3f, x2, 504,0)
inst_149:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x33333334, 0x40, 3f, x2, 516,0)
inst_150:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x66666667, 0x20, 3f, x2, 520,0)
inst_153:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555555, 0x10000, 0x6, 1b, x2, 532,0)
inst_154:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x3, 0x8, 1b, x2, 536,0)
inst_155:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x55555555, 0x2, 1b, x2, 540,0)
inst_156:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xaaaaaaaa, 0x2, 3f, x2, 544,0)
inst_162:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xffff, 0x10, 3f, x2, 568,0)
inst_163:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x55555554, 0x2, 1b, x2, 572,0)
inst_165:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x4, 0x0, 3f, x2, 580,0)
inst_167:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x66666665, 0x20, 3f, x2, 588,0)
inst_169:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xfffe, 0x40, 3f, x2, 596,0)
inst_172:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x6, 0x80, 3f, x2, 608,0)
inst_173:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x33333334, 0xa, 1b, x2, 612,0)
inst_174:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x66666667, 0x8, 3f, x2, 616,0)
inst_176:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x1, 0x2, 3f, x2, 624,0)
inst_177:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x10000, 0x20, 3f, x2, 628,0)
inst_178:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x3, 0x8, 3f, x2, 632,0)
inst_180:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xaaaaaaaa, 0x0, 3f, x2, 640,0)
inst_181:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x5, 0x6, 3f, x2, 644,0)
inst_183:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x66666666, 0x8, 1b, x2, 652,0)
inst_184:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xb504, 0x10, 3f, x2, 656,0)
inst_185:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x0, 0x0, 1b, x2, 660,0)
inst_187:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x2, 0x80, 3f, x2, 668,0)
inst_189:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xaaaaaaa9, 0x6, 1b, x2, 676,0)
inst_190:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x4, 0x0, 1b, x2, 680,0)
inst_191:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x33333332, 0x6, 3f, x2, 684,0)
inst_193:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xb503, 0x80, 3f, x2, 692,0)
inst_194:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xfffe, 0x2, 1b, x2, 696,0)
inst_196:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xaaaaaaab, 0x4, 3f, x2, 704,0)
inst_197:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x6, 0x4, 3f, x2, 708,0)
inst_198:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x33333334, 0x8, 3f, x2, 712,0)
inst_199:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x66666667, 0x40, 3f, x2, 716,0)
inst_200:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0xb505, 0x20, 3f, x2, 720,0)
inst_202:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x5, 0x10000, 0x80, 3f, x2, 728,0)
inst_205:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0xaaaaaaaa, 0x6, 3f, x2, 740,0)
inst_207:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x33333333, 0x2, 3f, x2, 748,0)
inst_208:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x66666666, 0x20, 3f, x2, 752,0)
inst_212:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x2, 0x10, 3f, x2, 768,0)
inst_213:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x55555554, 0x2, 3f, x2, 772,0)
inst_215:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x4, 0x2, 1b, x2, 780,0)
inst_216:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x33333332, 0x8, 3f, x2, 784,0)
inst_218:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0xb503, 0x0, 3f, x2, 792,0)
inst_219:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0xfffe, 0x8, 3f, x2, 796,0)
inst_220:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x55555556, 0x20, 3f, x2, 800,0)
inst_222:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x6, 0x8, 3f, x2, 808,0)
inst_223:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x33333334, 0x10, 3f, x2, 812,0)
inst_224:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x66666667, 0x40, 3f, x2, 816,0)
inst_225:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0xb505, 0x40, 3f, x2, 820,0)
inst_226:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x1, 0x10, 3f, x2, 824,0)
inst_227:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333333, 0x10000, 0x6, 1b, x2, 828,0)
inst_228:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x3, 0x6, 1b, x2, 832,0)
inst_229:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x55555555, 0x4, 3f, x2, 836,0)
inst_230:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0xaaaaaaaa, 0x0, 3f, x2, 840,0)
inst_231:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x5, 0x10, 3f, x2, 844,0)
inst_232:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x33333333, 0x40, 3f, x2, 848,0)
inst_233:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x66666666, 0x8, 1b, x2, 852,0)
inst_235:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x0, 0x4, 3f, x2, 860,0)
inst_236:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0xffff, 0x4, 3f, x2, 864,0)
inst_237:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x2, 0x8, 1b, x2, 868,0)
inst_238:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x55555554, 0x4, 1b, x2, 872,0)
inst_240:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x4, 0x8, 1b, x2, 880,0)
inst_241:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x33333332, 0x8, 3f, x2, 884,0)
inst_242:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x66666665, 0x2, 3f, x2, 888,0)
inst_244:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0xfffe, 0x4, 3f, x2, 896,0)
inst_246:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0xaaaaaaab, 0x4, 3f, x2, 904,0)
inst_248:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x33333334, 0x4, 1b, x2, 912,0)
inst_249:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x66666667, 0x10, 3f, x2, 916,0)
inst_250:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0xb505, 0xa, 1b, x2, 920,0)
inst_251:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666666, 0x1, 0x8, 1b, x2, 924,0)
inst_253:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x3, 0x2, 3f, x2, 932,0)
inst_254:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x55555555, 0x40, 3f, x2, 936,0)
inst_255:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xaaaaaaaa, 0x2, 3f, x2, 940,0)
inst_256:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x5, 0x20, 3f, x2, 944,0)
inst_258:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x66666666, 0x6, 3f, x2, 952,0)
inst_259:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xb504, 0x0, 3f, x2, 956,0)
inst_260:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x0, 0x0, 1b, x2, 960,0)
inst_261:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xffff, 0x20, 3f, x2, 964,0)
inst_262:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x2, 0x4, 3f, x2, 968,0)
inst_265:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x4, 0x0, 1b, x2, 980,0)
inst_267:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x66666665, 0x6, 1b, x2, 988,0)
inst_268:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xb503, 0x2, 1b, x2, 992,0)
inst_269:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xfffe, 0x6, 3f, x2, 996,0)
inst_270:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x55555556, 0x80, 3f, x2, 1000,0)
inst_271:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xaaaaaaab, 0x6, 1b, x2, 1004,0)
inst_272:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x6, 0x8, 1b, x2, 1008,0)
inst_273:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x33333334, 0x0, 1b, x2, 1012,0)
inst_274:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x66666667, 0x4, 1b, x2, 1016,0)
inst_275:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0xb505, 0x6, 3f, x2, 1020,0)
inst_276:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x1, 0x10, 3f, x2, 1024,0)
inst_277:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb504, 0x10000, 0x2, 1b, x2, 1028,0)
inst_278:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x3, 0x2, 1b, x2, 1032,0)
inst_279:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x55555555, 0xa, 1b, x2, 1036,0)
inst_280:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xaaaaaaaa, 0x4, 3f, x2, 1040,0)
inst_281:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x5, 0x4, 3f, x2, 1044,0)
inst_282:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x33333333, 0xa, 1b, x2, 1048,0)
inst_284:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xb504, 0x8, 3f, x2, 1056,0)
inst_285:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x0, 0x80, 3f, x2, 1060,0)
inst_286:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xffff, 0x2, 1b, x2, 1064,0)
inst_287:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x2, 0x8, 1b, x2, 1068,0)
inst_289:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xaaaaaaa9, 0x2, 3f, x2, 1076,0)
inst_290:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x4, 0x20, 3f, x2, 1080,0)
inst_292:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x66666665, 0x80, 3f, x2, 1088,0)
inst_293:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xb503, 0x10, 3f, x2, 1092,0)
inst_294:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xfffe, 0xa, 1b, x2, 1096,0)
inst_295:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x55555556, 0x80, 3f, x2, 1100,0)
inst_296:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xaaaaaaab, 0x4, 1b, x2, 1104,0)
inst_297:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x6, 0x2, 3f, x2, 1108,0)
inst_299:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x66666667, 0x0, 1b, x2, 1116,0)
inst_300:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0xb505, 0x6, 1b, x2, 1120,0)
inst_302:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x0, 0x10000, 0x6, 3f, x2, 1128,0)
inst_303:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x3, 0x2, 3f, x2, 1132,0)
inst_304:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x55555555, 0x40, 3f, x2, 1136,0)
inst_305:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0xaaaaaaaa, 0x2, 1b, x2, 1140,0)
inst_306:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x5, 0x6, 1b, x2, 1144,0)
inst_307:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x33333333, 0x6, 1b, x2, 1148,0)
inst_308:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x66666666, 0x40, 3f, x2, 1152,0)
inst_312:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x55555554, 0x4, 1b, x2, 1168,0)
inst_316:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x66666665, 0x2, 1b, x2, 1184,0)
inst_318:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0xfffe, 0x80, 3f, x2, 1192,0)
inst_320:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0xaaaaaaab, 0x2, 1b, x2, 1200,0)
inst_322:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x33333334, 0x8, 3f, x2, 1208,0)
inst_323:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x66666667, 0x6, 3f, x2, 1212,0)
inst_324:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0xb505, 0x8, 1b, x2, 1216,0)
inst_325:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x1, 0x8, 1b, x2, 1220,0)
inst_326:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xffff, 0x10000, 0x0, 3f, x2, 1224,0)
inst_327:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x3, 0x8, 3f, x2, 1228,0)
inst_328:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x55555555, 0x8, 1b, x2, 1232,0)
inst_330:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x5, 0x10, 3f, x2, 1240,0)
inst_332:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x66666666, 0x8, 1b, x2, 1248,0)
inst_334:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x0, 0x6, 3f, x2, 1256,0)
inst_335:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0xffff, 0x2, 3f, x2, 1260,0)
inst_337:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x55555554, 0x80, 3f, x2, 1268,0)
inst_339:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x4, 0x40, 3f, x2, 1276,0)
inst_340:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x33333332, 0x0, 3f, x2, 1280,0)
inst_341:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x66666665, 0x40, 3f, x2, 1284,0)
inst_342:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0xb503, 0x8, 3f, x2, 1288,0)
inst_343:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0xfffe, 0x80, 3f, x2, 1292,0)
inst_345:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0xaaaaaaab, 0x2, 1b, x2, 1300,0)
inst_346:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x6, 0x0, 1b, x2, 1304,0)
inst_347:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x33333334, 0x0, 3f, x2, 1308,0)
inst_348:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x66666667, 0x8, 1b, x2, 1312,0)
inst_349:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0xb505, 0x8, 1b, x2, 1316,0)
inst_350:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x2, 0x1, 0x10, 3f, x2, 1320,0)
inst_352:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x3, 0x10, 3f, x2, 1328,0)
inst_353:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x55555555, 0x20, 3f, x2, 1332,0)
inst_354:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xaaaaaaaa, 0x2, 3f, x2, 1336,0)
inst_355:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x5, 0xa, 1b, x2, 1340,0)
inst_356:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x33333333, 0x6, 3f, x2, 1344,0)
inst_358:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xb504, 0x20, 3f, x2, 1352,0)
inst_360:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xffff, 0x8, 3f, x2, 1360,0)
inst_361:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x2, 0x20, 3f, x2, 1364,0)
inst_362:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x55555554, 0x6, 3f, x2, 1368,0)
inst_363:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xaaaaaaa9, 0x8, 1b, x2, 1372,0)
inst_366:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x66666665, 0x2, 1b, x2, 1384,0)
inst_367:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xb503, 0x20, 3f, x2, 1388,0)
inst_368:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xfffe, 0x40, 3f, x2, 1392,0)
inst_371:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x6, 0x8, 1b, x2, 1404,0)
inst_372:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x33333334, 0x4, 3f, x2, 1408,0)
inst_373:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x66666667, 0x2, 3f, x2, 1412,0)
inst_374:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0xb505, 0x80, 3f, x2, 1416,0)
inst_375:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x1, 0x0, 3f, x2, 1420,0)
inst_376:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555554, 0x10000, 0x8, 1b, x2, 1424,0)
inst_377:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x3, 0xa, 1b, x2, 1428,0)
inst_378:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x55555555, 0x10, 3f, x2, 1432,0)
inst_379:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xaaaaaaaa, 0x8, 1b, x2, 1436,0)
inst_380:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x5, 0x0, 1b, x2, 1440,0)
inst_382:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x66666666, 0x6, 3f, x2, 1448,0)
inst_384:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x0, 0x6, 1b, x2, 1456,0)
inst_385:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xffff, 0x2, 3f, x2, 1460,0)
inst_387:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x55555554, 0x0, 3f, x2, 1468,0)
inst_388:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xaaaaaaa9, 0x4, 1b, x2, 1472,0)
inst_390:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x33333332, 0x40, 3f, x2, 1480,0)
inst_392:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xb503, 0x80, 3f, x2, 1488,0)
inst_393:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xfffe, 0x20, 3f, x2, 1492,0)
inst_394:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x55555556, 0x20, 3f, x2, 1496,0)
inst_395:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xaaaaaaab, 0x10, 3f, x2, 1500,0)
inst_396:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x6, 0x6, 1b, x2, 1504,0)
inst_397:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x33333334, 0x20, 3f, x2, 1508,0)
inst_401:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x3, 0x0, 1b, x2, 1524,0)
inst_402:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x55555555, 0x2, 3f, x2, 1528,0)
inst_403:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xaaaaaaaa, 0x80, 3f, x2, 1532,0)
inst_407:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xb504, 0x0, 1b, x2, 1548,0)
inst_409:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xffff, 0x20, 3f, x2, 1556,0)
inst_410:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x2, 0x4, 3f, x2, 1560,0)
inst_411:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x55555554, 0x6, 3f, x2, 1564,0)
inst_412:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xaaaaaaa9, 0x80, 3f, x2, 1568,0)
inst_414:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x33333332, 0x6, 3f, x2, 1576,0)
inst_415:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x66666665, 0x0, 3f, x2, 1580,0)
inst_416:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xb503, 0xa, 1b, x2, 1584,0)
inst_418:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x55555556, 0x4, 1b, x2, 1592,0)
inst_419:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xaaaaaaab, 0x10, 3f, x2, 1596,0)
inst_420:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x6, 0x6, 3f, x2, 1600,0)
inst_421:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x33333334, 0x6, 1b, x2, 1604,0)
inst_423:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0xb505, 0x0, 3f, x2, 1612,0)
inst_424:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x4, 0x1, 0x6, 1b, x2, 1616,0)
inst_426:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x3, 0x4, 1b, x2, 1624,0)
inst_427:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x55555555, 0x6, 1b, x2, 1628,0)
inst_428:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xaaaaaaaa, 0x8, 3f, x2, 1632,0)
inst_429:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x5, 0x8, 1b, x2, 1636,0)
inst_430:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x33333333, 0x6, 1b, x2, 1640,0)
inst_431:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x66666666, 0x4, 3f, x2, 1644,0)
inst_432:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xb504, 0x40, 3f, x2, 1648,0)
inst_433:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x0, 0x4, 1b, x2, 1652,0)
inst_434:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xffff, 0x2, 3f, x2, 1656,0)
inst_436:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x55555554, 0x4, 1b, x2, 1664,0)
inst_437:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xaaaaaaa9, 0x0, 1b, x2, 1668,0)
inst_438:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x4, 0x0, 1b, x2, 1672,0)
inst_439:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x33333332, 0x8, 3f, x2, 1676,0)
inst_440:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x66666665, 0x0, 1b, x2, 1680,0)
inst_442:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xfffe, 0x40, 3f, x2, 1688,0)
inst_444:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xaaaaaaab, 0x4, 3f, x2, 1696,0)
inst_445:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x6, 0x4, 1b, x2, 1700,0)
inst_446:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x33333334, 0x20, 3f, x2, 1704,0)
inst_447:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0x66666667, 0x6, 3f, x2, 1708,0)
inst_448:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333332, 0xb505, 0x20, 3f, x2, 1712,0)
inst_452:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x55555555, 0x2, 1b, x2, 1728,0)
inst_454:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x5, 0x6, 1b, x2, 1736,0)
inst_457:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0xb504, 0x0, 1b, x2, 1748,0)
inst_461:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x55555554, 0x2, 1b, x2, 1764,0)
inst_462:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0xaaaaaaa9, 0x0, 1b, x2, 1768,0)
inst_463:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x4, 0x6, 3f, x2, 1772,0)
inst_465:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x66666665, 0x0, 3f, x2, 1780,0)
inst_466:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0xb503, 0x6, 3f, x2, 1784,0)
inst_469:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x1, 0x6, 3f, x2, 1796,0)
inst_470:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x10000, 0x0, 3f, x2, 1800,0)
inst_472:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x55555555, 0x80, 3f, x2, 1808,0)
inst_473:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xaaaaaaaa, 0x10, 3f, x2, 1812,0)
inst_474:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x5, 0x0, 3f, x2, 1816,0)
inst_477:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xb504, 0x6, 3f, x2, 1828,0)
inst_478:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x0, 0x2, 1b, x2, 1832,0)
inst_479:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xffff, 0x80, 3f, x2, 1836,0)
inst_480:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x2, 0x8, 3f, x2, 1840,0)
inst_484:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x33333332, 0x40, 3f, x2, 1856,0)
inst_485:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x66666665, 0x0, 1b, x2, 1860,0)
inst_486:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xb503, 0x2, 3f, x2, 1864,0)
inst_487:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xfffe, 0x4, 1b, x2, 1868,0)
inst_488:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x55555556, 0x6, 3f, x2, 1872,0)
inst_489:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xaaaaaaab, 0x2, 3f, x2, 1876,0)
inst_490:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x6, 0x4, 1b, x2, 1880,0)
inst_491:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x33333334, 0x40, 3f, x2, 1884,0)
inst_492:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x66666667, 0x80, 3f, x2, 1888,0)
inst_493:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0xb505, 0x6, 3f, x2, 1892,0)
inst_494:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x1, 0x8, 1b, x2, 1896,0)
inst_495:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb503, 0x10000, 0x0, 1b, x2, 1900,0)
inst_496:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x3, 0x4, 1b, x2, 1904,0)
inst_497:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x55555555, 0x10, 3f, x2, 1908,0)
inst_498:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0xaaaaaaaa, 0x10, 3f, x2, 1912,0)
inst_499:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x5, 0x0, 3f, x2, 1916,0)
inst_500:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x33333333, 0x4, 1b, x2, 1920,0)
inst_501:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x66666666, 0x4, 1b, x2, 1924,0)
inst_504:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0xffff, 0x6, 3f, x2, 1936,0)
inst_505:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x2, 0xa, 1b, x2, 1940,0)
inst_506:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x55555554, 0x2, 1b, x2, 1944,0)
inst_507:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0xaaaaaaa9, 0x80, 3f, x2, 1948,0)
inst_508:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x4, 0x80, 3f, x2, 1952,0)
inst_509:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x33333332, 0x4, 1b, x2, 1956,0)
inst_510:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x66666665, 0x8, 1b, x2, 1960,0)
inst_511:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0xb503, 0x20, 3f, x2, 1964,0)
inst_513:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x55555556, 0x0, 1b, x2, 1972,0)
inst_514:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0xaaaaaaab, 0x80, 3f, x2, 1976,0)
inst_515:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x6, 0x2, 1b, x2, 1980,0)
inst_517:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x66666667, 0x2, 1b, x2, 1988,0)
inst_518:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0xb505, 0x0, 1b, x2, 1992,0)
inst_519:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x1, 0x40, 3f, x2, 1996,0)
inst_520:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xfffe, 0x10000, 0x20, 3f, x2, 2000,0)
inst_521:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x3, 0x8, 3f, x2, 2004,0)
inst_523:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xaaaaaaaa, 0x6, 3f, x2, 2012,0)
inst_524:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x5, 0x2, 1b, x2, 2016,0)
inst_525:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x33333333, 0x20, 3f, x2, 2020,0)
inst_526:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x66666666, 0x2, 3f, x2, 2024,0)
inst_527:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xb504, 0x6, 1b, x2, 2028,0)
inst_529:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xffff, 0xa, 1b, x2, 2036,0)
inst_530:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x2, 0x40, 3f, x2, 2040,0)
inst_531:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x55555554, 0x20, 3f, x2, 2044,0)
RVTEST_SIGBASE(x2, signature_x2_1)
inst_532:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xaaaaaaa9, 0x40, 3f, x2, 0,0)
inst_533:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x4, 0xa, 1b, x2, 4,0)
inst_534:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x33333332, 0x80, 3f, x2, 8,0)
inst_536:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xb503, 0x8, 1b, x2, 16,0)
inst_537:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xfffe, 0x10, 3f, x2, 20,0)
inst_538:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x55555556, 0x0, 3f, x2, 24,0)
inst_540:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x6, 0x6, 1b, x2, 32,0)
inst_542:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x66666667, 0x2, 3f, x2, 40,0)
inst_543:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0xb505, 0x0, 1b, x2, 44,0)
inst_544:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x1, 0x0, 1b, x2, 48,0)
inst_545:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x55555556, 0x10000, 0x20, 3f, x2, 52,0)
inst_546:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x3, 0x80, 3f, x2, 56,0)
inst_548:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xaaaaaaaa, 0x4, 3f, x2, 64,0)
inst_549:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x5, 0x40, 3f, x2, 68,0)
inst_550:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x33333333, 0x40, 3f, x2, 72,0)
inst_551:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x66666666, 0x0, 3f, x2, 76,0)
inst_554:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xffff, 0x2, 1b, x2, 88,0)
inst_556:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x55555554, 0x2, 1b, x2, 96,0)
inst_557:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xaaaaaaa9, 0x80, 3f, x2, 100,0)
inst_558:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x33333332, 0x6, 3f, x2, 104,0)
inst_559:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x66666665, 0x80, 3f, x2, 108,0)
inst_560:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xb503, 0x6, 1b, x2, 112,0)
inst_561:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xfffe, 0x0, 1b, x2, 116,0)
inst_562:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x55555556, 0xa, 1b, x2, 120,0)
inst_564:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x6, 0xa, 1b, x2, 128,0)
inst_566:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x66666667, 0x40, 3f, x2, 136,0)
inst_567:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xb505, 0xa, 1b, x2, 140,0)
inst_569:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x10000, 0x4, 3f, x2, 148,0)
inst_570:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x3, 0x8, 3f, x2, 152,0)
inst_572:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xaaaaaaaa, 0x4, 1b, x2, 160,0)
inst_573:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x5, 0x6, 3f, x2, 164,0)
inst_574:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x33333333, 0x8, 3f, x2, 168,0)
inst_576:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xb504, 0x6, 3f, x2, 176,0)
inst_578:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xffff, 0x6, 3f, x2, 184,0)
inst_579:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x2, 0x6, 3f, x2, 188,0)
inst_581:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xaaaaaaa9, 0x4, 1b, x2, 196,0)
inst_582:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x4, 0xa, 1b, x2, 200,0)
inst_583:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x33333332, 0xa, 1b, x2, 204,0)
inst_584:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x66666665, 0x4, 1b, x2, 208,0)
inst_585:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xb503, 0xa, 1b, x2, 212,0)
inst_586:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xfffe, 0x4, 1b, x2, 216,0)
inst_587:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x55555556, 0x4, 3f, x2, 220,0)
inst_588:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xaaaaaaab, 0x6, 3f, x2, 224,0)
inst_589:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x6, 0x4, 1b, x2, 228,0)
inst_590:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x33333334, 0x8, 3f, x2, 232,0)
inst_591:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x66666667, 0x0, 1b, x2, 236,0)
inst_592:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0xb505, 0x6, 1b, x2, 240,0)
inst_594:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x6, 0x10000, 0x6, 1b, x2, 248,0)
inst_595:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x3, 0x20, 3f, x2, 252,0)
inst_596:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x55555555, 0x2, 3f, x2, 256,0)
inst_597:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0xaaaaaaab, 0x2, 3f, x2, 260,0)
inst_598:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0xaaaaaaaa, 0x2, 1b, x2, 264,0)
inst_600:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x33333333, 0x6, 1b, x2, 272,0)
inst_601:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x66666666, 0x40, 3f, x2, 276,0)
inst_604:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0xffff, 0x8, 3f, x2, 288,0)
inst_605:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x2, 0x6, 1b, x2, 292,0)
inst_609:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x33333332, 0x2, 1b, x2, 308,0)
inst_610:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x66666665, 0x20, 3f, x2, 312,0)
inst_612:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0xfffe, 0xa, 1b, x2, 320,0)
inst_614:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0xaaaaaaab, 0x80, 3f, x2, 328,0)
inst_615:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x6, 0xa, 1b, x2, 332,0)
inst_616:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x33333334, 0x4, 3f, x2, 336,0)
inst_617:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x66666667, 0x0, 1b, x2, 340,0)
inst_618:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0xb505, 0x0, 1b, x2, 344,0)
inst_619:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x1, 0x2, 3f, x2, 348,0)
inst_620:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x33333334, 0x10000, 0xa, 1b, x2, 352,0)
inst_621:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x3, 0x2, 3f, x2, 356,0)
inst_622:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x55555555, 0x8, 3f, x2, 360,0)
inst_623:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0xaaaaaaaa, 0xa, 1b, x2, 364,0)
inst_624:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x5, 0x6, 3f, x2, 368,0)
inst_626:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x66666666, 0x40, 3f, x2, 376,0)
inst_628:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x0, 0x4, 3f, x2, 384,0)
inst_629:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0xffff, 0x8, 3f, x2, 388,0)
inst_630:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x2, 0x40, 3f, x2, 392,0)
inst_631:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x55555554, 0x2, 3f, x2, 396,0)
inst_632:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0xaaaaaaa9, 0x40, 3f, x2, 400,0)
inst_635:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x66666665, 0x10, 3f, x2, 412,0)
inst_636:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0xb503, 0x0, 3f, x2, 416,0)
inst_639:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0xaaaaaaab, 0x8, 3f, x2, 428,0)
inst_640:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x6, 0x80, 3f, x2, 432,0)
inst_641:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x33333334, 0x8, 1b, x2, 436,0)
inst_642:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x66666667, 0x4, 1b, x2, 440,0)
inst_643:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0xb505, 0x40, 3f, x2, 444,0)
inst_644:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x1, 0x2, 3f, x2, 448,0)
inst_645:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666667, 0x10000, 0x0, 1b, x2, 452,0)
inst_646:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x3, 0x8, 3f, x2, 456,0)
inst_647:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x55555555, 0x0, 1b, x2, 460,0)
inst_648:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xaaaaaaaa, 0x0, 1b, x2, 464,0)
inst_649:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x5, 0x80, 3f, x2, 468,0)
inst_650:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x33333333, 0x2, 3f, x2, 472,0)
inst_651:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x66666666, 0x8, 1b, x2, 476,0)
inst_652:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xb504, 0x8, 3f, x2, 480,0)
inst_653:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x0, 0x8, 3f, x2, 484,0)
inst_654:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xffff, 0x8, 1b, x2, 488,0)
inst_655:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x2, 0x0, 1b, x2, 492,0)
inst_656:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x55555554, 0x40, 3f, x2, 496,0)
inst_657:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xaaaaaaa9, 0x2, 3f, x2, 500,0)
inst_658:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x4, 0x10, 3f, x2, 504,0)
inst_659:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x33333332, 0x2, 1b, x2, 508,0)
inst_662:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xfffe, 0x20, 3f, x2, 520,0)
inst_663:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x55555556, 0x20, 3f, x2, 524,0)
inst_664:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xaaaaaaab, 0x4, 1b, x2, 528,0)
inst_665:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x6, 0x0, 1b, x2, 532,0)
inst_666:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x33333334, 0x4, 3f, x2, 536,0)
inst_667:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x66666667, 0x40, 3f, x2, 540,0)
inst_668:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0xb505, 0x80, 3f, x2, 544,0)
inst_669:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x1, 0x2, 3f, x2, 548,0)
inst_670:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0xb505, 0x10000, 0x8, 1b, x2, 552,0)
inst_671:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x3, 0x0, 1b, x2, 556,0)
inst_672:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x55555555, 0xa, 1b, x2, 560,0)
inst_673:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0xaaaaaaaa, 0x20, 3f, x2, 564,0)
inst_674:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x5, 0x40, 3f, x2, 568,0)
inst_675:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x33333333, 0x2, 3f, x2, 572,0)
inst_676:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x66666666, 0x0, 1b, x2, 576,0)
inst_679:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0xffff, 0x4, 3f, x2, 588,0)
inst_681:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x55555554, 0x4, 3f, x2, 596,0)
inst_683:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x4, 0x80, 3f, x2, 604,0)
inst_687:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0xfffe, 0x8, 1b, x2, 620,0)
inst_688:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x55555556, 0x80, 3f, x2, 624,0)
inst_689:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0xaaaaaaab, 0x8, 3f, x2, 628,0)
inst_690:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x6, 0x20, 3f, x2, 632,0)
inst_691:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x33333334, 0x2, 3f, x2, 636,0)
inst_692:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x66666667, 0x6, 3f, x2, 640,0)
inst_693:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0xb505, 0x4, 3f, x2, 644,0)
inst_694:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x1, 0x2, 3f, x2, 648,0)
inst_695:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x1, 0x10000, 0x0, 1b, x2, 652,0)
inst_696:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x3, 0x20, 3f, x2, 656,0)
inst_699:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x33333333, 0x10, 3f, x2, 668,0)
inst_701:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0xb504, 0x40, 3f, x2, 676,0)
inst_702:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x0, 0x0, 3f, x2, 680,0)
inst_703:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0xffff, 0x10, 3f, x2, 684,0)
inst_704:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x2, 0x20, 3f, x2, 688,0)
inst_705:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x55555554, 0x10, 3f, x2, 692,0)
inst_706:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0xaaaaaaa9, 0x6, 3f, x2, 696,0)
inst_707:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x4, 0x2, 1b, x2, 700,0)
inst_708:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x33333332, 0x0, 1b, x2, 704,0)
inst_709:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x66666665, 0x80, 3f, x2, 708,0)
inst_710:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0xb503, 0x4, 1b, x2, 712,0)
inst_713:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0xaaaaaaab, 0x0, 1b, x2, 724,0)
inst_714:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x6, 0x10, 3f, x2, 728,0)
inst_715:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x33333334, 0x0, 1b, x2, 732,0)
inst_716:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x66666667, 0x8, 3f, x2, 736,0)
inst_717:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0xb505, 0x6, 1b, x2, 740,0)
inst_719:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x10000, 0x10000, 0x0, 3f, x2, 748,0)
inst_721:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x33333334, 0x6, 3f, x2, 756,0)
inst_722:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0x66666667, 0xa, 1b, x2, 760,0)
inst_723:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x66666665, 0xb505, 0x8, 3f, x2, 764,0)
inst_724:
TEST_BRANCH_OP(bgeu, x3, x10, x11, 0x8, 0xfffffbff, 0x0, 1b, x2, 768,0)
inst_43:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x12, 0xffffff7f, 0x100, x2, 92, signature_x2_0)
inst_61:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffffbfff, 0xf7ffffff, 0x100, x2, 164, signature_x2_0)
inst_72:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x200, 0x400000, 0x100, x2, 208, signature_x2_0)
inst_82:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x400000, 0x8000, 0x100, x2, 248, signature_x2_0)
inst_86:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x80000000, 0x4000000, 0x100, x2, 264, signature_x2_0)
inst_93:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xfffdffff, 0xfffe, 0x100, x2, 292, signature_x2_0)
inst_103:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x7fffffff, 0x6, 0x100, x2, 332, signature_x2_0)
inst_114:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x3, 0x55555554, 0x100, x2, 376, signature_x2_0)
inst_118:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x3, 0x66666665, 0x100, x2, 392, signature_x2_0)
inst_161:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x0, 0x100, x2, 564, signature_x2_0)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
inst_179:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x5, 0x55555555, 0x100, x2, 636, signature_x2_0)
inst_182:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x5, 0x33333333, 0x100, x2, 648, signature_x2_0)
inst_201:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x5, 0x1, 0x100, x2, 724, signature_x2_0)
inst_204:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333333, 0x55555555, 0x100, x2, 736, signature_x2_0)
inst_206:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333333, 0x5, 0x100, x2, 744, signature_x2_0)
inst_209:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333333, 0xb504, 0x100, x2, 756, signature_x2_0)
inst_252:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666666, 0x10000, 0x100, x2, 928, signature_x2_0)
inst_288:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x0, 0x55555554, 0x100, x2, 1072, signature_x2_0)
inst_313:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffff, 0xaaaaaaa9, 0x100, x2, 1172, signature_x2_0)
inst_351:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x2, 0x10000, 0x100, x2, 1324, signature_x2_0)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
inst_357:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555554, 0x66666666, 0x100, x2, 1348, signature_x2_0)
inst_405:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x4, 0x33333333, 0x100, x2, 1540, signature_x2_0)
inst_449:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333332, 0x1, 0x100, x2, 1716, signature_x2_0)
inst_481:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb503, 0x55555554, 0x100, x2, 1844, signature_x2_0)
inst_483:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb503, 0x4, 0x100, x2, 1852, signature_x2_0)
inst_502:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xfffe, 0xb504, 0x100, x2, 1928, signature_x2_0)
inst_503:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xfffe, 0x0, 0x100, x2, 1932, signature_x2_0)
inst_516:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xfffe, 0x33333334, 0x100, x2, 1984, signature_x2_0)
inst_522:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555556, 0x55555555, 0x100, x2, 2008, signature_x2_0)
inst_547:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x55555555, 0x100, x2, 60, signature_x2_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
inst_563:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xaaaaaaab, 0x100, x2, 124, signature_x2_1)
inst_568:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x1, 0x100, x2, 144, signature_x2_1)
inst_575:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x6, 0x66666666, 0x100, x2, 172, signature_x2_1)
inst_593:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x6, 0x1, 0x100, x2, 244, signature_x2_1)
inst_677:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x1, 0xb504, 0x100, x2, 580, signature_x2_1)
inst_680:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x1, 0x2, 0x100, x2, 592, signature_x2_1)
inst_685:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x1, 0x66666665, 0x100, x2, 612, signature_x2_1)
inst_697:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x10000, 0xaaaaaaaa, 0x100, x2, 660, signature_x2_1)
inst_711:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x10000, 0xfffe, 0x100, x2, 716, signature_x2_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
TEST_BRANCH_BWD_RETURNBLOCK(0x400)
inst_8:
TEST_BRANCH_BWD_OP(bgeu, x5, x0, x20, 0x0, 0x8, 0x400, x9, 32, signature_x9_1)
inst_24:
TEST_BRANCH_BWD_OP(bgeu, x3, x15, x5, 0x0, 0x80000, 0x400, x2, 16, signature_x2_0)
inst_27:
TEST_BRANCH_BWD_OP(bgeu, x3, x20, x17, 0xfffff7ff, 0x400000, 0x400, x2, 28, signature_x2_0)
inst_30:
TEST_BRANCH_BWD_OP(bgeu, x3, x19, x6, 0x80, 0x2000000, 0x400, x2, 40, signature_x2_0)
inst_123:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x3, 0x6, 0x400, x2, 412, signature_x2_0)
inst_131:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x55555555, 0xaaaaaaaa, 0x400, x2, 444, signature_x2_0)
inst_147:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x55555555, 0xaaaaaaab, 0x400, x2, 508, signature_x2_0)
inst_164:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xaaaaaaa9, 0x400, x2, 576, signature_x2_0)
inst_203:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333333, 0x3, 0x400, x2, 732, signature_x2_0)
inst_211:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333333, 0xffff, 0x400, x2, 764, signature_x2_0)
inst_221:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333333, 0xaaaaaaab, 0x400, x2, 804, signature_x2_0)
inst_245:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666666, 0x55555556, 0x400, x2, 900, signature_x2_0)
inst_291:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x0, 0x33333332, 0x400, x2, 1084, signature_x2_0)
inst_301:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x0, 0x1, 0x400, x2, 1124, signature_x2_0)
inst_314:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xffff, 0x4, 0x400, x2, 1176, signature_x2_0)
inst_329:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2, 0xaaaaaaaa, 0x400, x2, 1236, signature_x2_0)
inst_333:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2, 0xb504, 0x400, x2, 1252, signature_x2_0)
inst_336:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2, 0x2, 0x400, x2, 1264, signature_x2_0)
inst_344:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2, 0x55555556, 0x400, x2, 1296, signature_x2_0)
inst_365:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x55555554, 0x33333332, 0x400, x2, 1380, signature_x2_0)
inst_404:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x4, 0x5, 0x400, x2, 1536, signature_x2_0)
inst_435:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333332, 0x2, 0x400, x2, 1660, signature_x2_0)
inst_443:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333332, 0x55555556, 0x400, x2, 1692, signature_x2_0)
inst_458:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x0, 0x400, x2, 1752, signature_x2_0)
inst_468:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x55555556, 0x400, x2, 1792, signature_x2_0)
inst_553:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x0, 0x400, x2, 84, signature_x2_1)
inst_599:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333334, 0x5, 0x400, x2, 268, signature_x2_1)
inst_602:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333334, 0xb504, 0x400, x2, 280, signature_x2_1)
inst_607:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333334, 0xaaaaaaa9, 0x400, x2, 300, signature_x2_1)
inst_625:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666667, 0x33333333, 0x400, x2, 372, signature_x2_1)
inst_634:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666667, 0x33333332, 0x400, x2, 408, signature_x2_1)
inst_660:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xb505, 0x66666665, 0x400, x2, 512, signature_x2_1)
inst_661:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xb505, 0xb503, 0x400, x2, 516, signature_x2_1)
inst_682:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x1, 0xaaaaaaa9, 0x400, x2, 600, signature_x2_1)
inst_718:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x10000, 0x1, 0x400, x2, 744, signature_x2_1)
inst_725:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xfffffffe, 0x8, 0x400, x2, 772, signature_x2_1)
inst_5:
TEST_BRANCH_FWD_OP(bgeu, x5, x7, x16, 0x7, 0xb504, 0x400, x9, 20, signature_x9_1)
inst_51:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x2, 0xfffeffff, 0x400, x2, 124, signature_x2_0)
inst_71:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x100, 0xfffffff7, 0x400, x2, 204, signature_x2_0)
inst_74:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x800, 0xaaaaaaaa, 0x400, x2, 216, signature_x2_0)
inst_126:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x3, 0xb505, 0x400, x2, 424, signature_x2_0)
inst_148:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555555, 0x6, 0x400, x2, 512, signature_x2_0)
inst_159:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x66666666, 0x400, x2, 556, signature_x2_0)
inst_192:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x5, 0x66666665, 0x400, x2, 688, signature_x2_0)
inst_195:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x5, 0x55555556, 0x400, x2, 700, signature_x2_0)
inst_210:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333333, 0x0, 0x400, x2, 760, signature_x2_0)
inst_214:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333333, 0xaaaaaaa9, 0x400, x2, 776, signature_x2_0)
inst_239:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666666, 0xaaaaaaa9, 0x400, x2, 876, signature_x2_0)
inst_263:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb504, 0x55555554, 0x400, x2, 972, signature_x2_0)
inst_264:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb504, 0xaaaaaaa9, 0x400, x2, 976, signature_x2_0)
inst_309:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffff, 0xb504, 0x400, x2, 1156, signature_x2_0)
inst_311:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffff, 0x2, 0x400, x2, 1164, signature_x2_0)
inst_359:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555554, 0x0, 0x400, x2, 1356, signature_x2_0)
inst_364:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555554, 0x4, 0x400, x2, 1376, signature_x2_0)
inst_369:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555554, 0x55555556, 0x400, x2, 1396, signature_x2_0)
inst_383:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xb504, 0x400, x2, 1452, signature_x2_0)
inst_398:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x66666667, 0x400, x2, 1512, signature_x2_0)
inst_399:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0xb505, 0x400, x2, 1516, signature_x2_0)
inst_441:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333332, 0xb503, 0x400, x2, 1684, signature_x2_0)
inst_451:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x3, 0x400, x2, 1724, signature_x2_0)
inst_467:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666665, 0xfffe, 0x400, x2, 1788, signature_x2_0)
inst_482:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb503, 0xaaaaaaa9, 0x400, x2, 1848, signature_x2_0)
inst_512:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xfffe, 0xfffe, 0x400, x2, 1968, signature_x2_0)
inst_555:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x2, 0x400, x2, 92, signature_x2_1)
inst_565:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0x33333334, 0x400, x2, 132, signature_x2_1)
inst_606:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333334, 0x55555554, 0x400, x2, 296, signature_x2_1)
inst_608:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333334, 0x4, 0x400, x2, 304, signature_x2_1)
inst_613:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333334, 0x55555556, 0x400, x2, 324, signature_x2_1)
inst_637:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666667, 0xfffe, 0x400, x2, 420, signature_x2_1)
inst_684:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x1, 0x33333332, 0x400, x2, 608, signature_x2_1)
inst_698:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x10000, 0x5, 0x400, x2, 664, signature_x2_1)
inst_720:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x6, 0x400, x2, 752, signature_x2_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x400)
TEST_BRANCH_BWD_RETURNBLOCK(0x556)
inst_52:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xffffdfff, 0xfffdffff, 0x556, x2, 128, signature_x2_0)
inst_53:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2000000, 0xfffbffff, 0x556, x2, 132, signature_x2_0)
inst_54:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xfffbffff, 0xfff7ffff, 0x556, x2, 136, signature_x2_0)
inst_69:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x20, 0xfffffeff, 0x556, x2, 196, signature_x2_0)
inst_76:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2000, 0x1, 0x556, x2, 224, signature_x2_0)
inst_84:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x20000000, 0x80, 0x556, x2, 256, signature_x2_0)
inst_94:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xfff7ffff, 0xfffbffff, 0x556, x2, 296, signature_x2_0)
inst_106:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x3, 0xaaaaaaaa, 0x556, x2, 344, signature_x2_0)
inst_151:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x55555555, 0xb505, 0x556, x2, 524, signature_x2_0)
inst_157:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x5, 0x556, x2, 548, signature_x2_0)
inst_166:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x33333332, 0x556, x2, 584, signature_x2_0)
inst_168:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xb503, 0x556, x2, 592, signature_x2_0)
inst_170:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x55555556, 0x556, x2, 600, signature_x2_0)
inst_186:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x5, 0xffff, 0x556, x2, 664, signature_x2_0)
inst_188:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x5, 0x55555554, 0x556, x2, 672, signature_x2_0)
inst_217:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333333, 0x66666665, 0x556, x2, 788, signature_x2_0)
inst_234:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666666, 0xb504, 0x556, x2, 856, signature_x2_0)
inst_266:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xb504, 0x33333332, 0x556, x2, 984, signature_x2_0)
inst_283:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x0, 0x66666666, 0x556, x2, 1052, signature_x2_0)
inst_298:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x0, 0x33333334, 0x556, x2, 1112, signature_x2_0)
inst_310:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xffff, 0x0, 0x556, x2, 1160, signature_x2_0)
inst_315:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xffff, 0x33333332, 0x556, x2, 1180, signature_x2_0)
inst_317:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xffff, 0xb503, 0x556, x2, 1188, signature_x2_0)
inst_331:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x2, 0x33333333, 0x556, x2, 1244, signature_x2_0)
inst_386:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x2, 0x556, x2, 1464, signature_x2_0)
inst_391:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x66666665, 0x556, x2, 1484, signature_x2_0)
inst_400:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x10000, 0x556, x2, 1520, signature_x2_0)
inst_413:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x4, 0x4, 0x556, x2, 1572, signature_x2_0)
inst_450:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x33333332, 0x10000, 0x556, x2, 1720, signature_x2_0)
inst_453:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666665, 0xaaaaaaaa, 0x556, x2, 1732, signature_x2_0)
inst_456:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x66666666, 0x556, x2, 1744, signature_x2_0)
inst_459:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666665, 0xffff, 0x556, x2, 1756, signature_x2_0)
inst_460:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x2, 0x556, x2, 1760, signature_x2_0)
inst_475:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0xb503, 0x33333333, 0x556, x2, 1820, signature_x2_0)
inst_539:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x55555556, 0xaaaaaaab, 0x556, x2, 28, signature_x2_1)
inst_577:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x6, 0x0, 0x556, x2, 180, signature_x2_1)
inst_638:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x66666667, 0x55555556, 0x556, x2, 424, signature_x2_1)
inst_678:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x1, 0x0, 0x556, x2, 584, signature_x2_1)
inst_700:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x10000, 0x66666666, 0x556, x2, 672, signature_x2_1)
inst_712:
TEST_BRANCH_BWD_OP(bgeu, x3, x10, x11, 0x10000, 0x55555556, 0x556, x2, 720, signature_x2_1)
inst_1:
TEST_BRANCH_FWD_OP(bgeu, x5, x31, x3, 0xffffffbf, 0xffffffbf, 0x200, x9, 4, signature_x9_1)
inst_12:
TEST_BRANCH_FWD_OP(bgeu, x5, x29, x23, 0xd, 0x80, 0x200, x9, 48, signature_x9_1)
inst_13:
TEST_BRANCH_FWD_OP(bgeu, x5, x12, x8, 0xffffff7f, 0x100, 0x200, x9, 52, signature_x9_1)
inst_23:
TEST_BRANCH_FWD_OP(bgeu, x3, x9, x24, 0xfdffffff, 0x40000, 0x200, x2, 12, signature_x2_0)
inst_28:
TEST_BRANCH_FWD_OP(bgeu, x3, x23, x11, 0x4000, 0x800000, 0x200, x2, 32, signature_x2_0)
inst_36:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb503, 0x80000000, 0x200, x2, 64, signature_x2_0)
inst_48:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xfffffdff, 0xffffdfff, 0x200, x2, 112, signature_x2_0)
inst_60:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555555, 0xfbffffff, 0x200, x2, 160, signature_x2_0)
inst_90:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffffffef, 0x0, 0x200, x2, 280, signature_x2_0)
inst_97:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffbfffff, 0xa, 0x200, x2, 308, signature_x2_0)
inst_110:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x3, 0xb504, 0x200, x2, 360, signature_x2_0)
inst_152:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555555, 0x1, 0x200, x2, 528, signature_x2_0)
inst_158:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0x33333333, 0x200, x2, 552, signature_x2_0)
inst_160:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xb504, 0x200, x2, 560, signature_x2_0)
inst_171:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xaaaaaaab, 0x200, x2, 604, signature_x2_0)
inst_175:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaaa, 0xb505, 0x200, x2, 620, signature_x2_0)
inst_243:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666666, 0xb503, 0x200, x2, 892, signature_x2_0)
inst_247:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666666, 0x6, 0x200, x2, 908, signature_x2_0)
inst_257:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb504, 0x33333333, 0x200, x2, 948, signature_x2_0)
inst_319:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffff, 0x55555556, 0x200, x2, 1196, signature_x2_0)
inst_321:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xffff, 0x6, 0x200, x2, 1204, signature_x2_0)
TEST_BRANCH_FWD_RETURNBLOCK(0x200)
inst_338:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x2, 0xaaaaaaa9, 0x200, x2, 1272, signature_x2_0)
inst_370:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555554, 0xaaaaaaab, 0x200, x2, 1400, signature_x2_0)
inst_381:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x33333333, 0x200, x2, 1444, signature_x2_0)
inst_389:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaa9, 0x4, 0x200, x2, 1476, signature_x2_0)
inst_406:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x4, 0x66666666, 0x200, x2, 1544, signature_x2_0)
inst_408:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x4, 0x0, 0x200, x2, 1552, signature_x2_0)
inst_417:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x4, 0xfffe, 0x200, x2, 1588, signature_x2_0)
inst_422:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x4, 0x66666667, 0x200, x2, 1608, signature_x2_0)
inst_425:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x4, 0x10000, 0x200, x2, 1620, signature_x2_0)
inst_455:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x33333333, 0x200, x2, 1740, signature_x2_0)
inst_464:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666665, 0x33333332, 0x200, x2, 1776, signature_x2_0)
inst_471:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb503, 0x3, 0x200, x2, 1804, signature_x2_0)
inst_476:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xb503, 0x66666666, 0x200, x2, 1824, signature_x2_0)
inst_528:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555556, 0x0, 0x200, x2, 2032, signature_x2_0)
inst_535:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555556, 0x66666665, 0x200, x2, 12, signature_x2_1)
inst_541:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x55555556, 0x33333334, 0x200, x2, 36, signature_x2_1)
inst_552:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0xaaaaaaab, 0xb504, 0x200, x2, 80, signature_x2_1)
inst_571:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x6, 0x55555555, 0x200, x2, 156, signature_x2_1)
inst_580:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x6, 0x55555554, 0x200, x2, 192, signature_x2_1)
inst_603:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333334, 0x0, 0x200, x2, 284, signature_x2_1)
inst_611:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x33333334, 0xb503, 0x200, x2, 316, signature_x2_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x200)
inst_627:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666667, 0xb504, 0x200, x2, 380, signature_x2_1)
inst_633:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x66666667, 0x4, 0x200, x2, 404, signature_x2_1)
inst_686:
TEST_BRANCH_FWD_OP(bgeu, x3, x10, x11, 0x1, 0xb503, 0x200, x2, 616, signature_x2_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x200)
#endif
RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4

rvtest_data:
.word 0xbabecafe
.word 0xbabecafe
.word 0xbabecafe
.word 0xbabecafe
RVTEST_DATA_END


RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x9_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x9_1:
    .fill 20*(XLEN/32),4,0xdeadbeef


signature_x2_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x2_1:
    .fill 194*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
