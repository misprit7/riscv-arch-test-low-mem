
// -----------
// This file was generated by riscv_ctg (https://gitlab.com/incoresemi/riscv-compliance/riscv_ctg)
// version   : 0.4.1
// timestamp : Tue Dec 15 15:36:11 2020 GMT
// usage     : riscv_ctg \
//                  -- cgf ('/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/dataset.cgf', '/scratch/git-repo/incoresemi/riscv-compliance/riscv_ctg/sample_cgfs/rv32i.cgf') \
//                  -- xlen 32 \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the beq instruction of the RISC-V I extension for the beq covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",beq)
RVTEST_SIGBASE(x5, signature_x5_1)
inst_1:
TEST_BRANCH_OP(beq, x11, x0, x14, 0x0, -0xb504, 0x20, 3f, x5, 4,0)
inst_2:
TEST_BRANCH_OP(beq, x11, x24, x2, -0x20001, -0x401, 0x0, 3f, x5, 8,0)
inst_3:
TEST_BRANCH_OP(beq, x11, x8, x4, -0x1001, 0x20000, 0x8, 3f, x5, 12,0)
inst_5:
TEST_BRANCH_OP(beq, x11, x20, x25, 0x80, 0x80, 0x8, 1b, x5, 20,0)
inst_6:
TEST_BRANCH_OP(beq, x11, x26, x15, -0x400001, 0x2000, 0x8, 1b, x5, 24,0)
inst_7:
TEST_BRANCH_OP(beq, x11, x22, x9, 0x5, 0x1, 0x4, 1b, x5, 28,0)
inst_8:
TEST_BRANCH_OP(beq, x11, x21, x10, 0x33333333, 0x2, 0x40, 3f, x5, 32,0)
inst_9:
TEST_BRANCH_OP(beq, x11, x30, x23, 0x6, 0x4, 0x40, 3f, x5, 36,0)
inst_10:
TEST_BRANCH_OP(beq, x11, x3, x17, -0x1001, 0x8, 0x4, 1b, x5, 40,0)
inst_11:
TEST_BRANCH_OP(beq, x11, x29, x28, 0x6, 0x10, 0x2, 3f, x5, 44,0)
inst_14:
TEST_BRANCH_OP(beq, x11, x17, x6, 0x0, 0x100, 0x10, 3f, x5, 56,0)
inst_15:
TEST_BRANCH_OP(beq, x11, x7, x12, 0x2000, 0x200, 0xa, 1b, x5, 60,0)
inst_16:
TEST_BRANCH_OP(beq, x11, x25, x16, 0x6, 0x400, 0x80, 3f, x5, 64,0)
inst_17:
TEST_BRANCH_OP(beq, x11, x28, x1, 0x4, 0x800, 0x6, 1b, x5, 68,0)
inst_18:
TEST_BRANCH_OP(beq, x11, x1, x31, -0x8000001, 0x1000, 0x2, 1b, x5, 72,0)
inst_19:
TEST_BRANCH_OP(beq, x2, x4, x22, -0x201, 0x4000, 0x2, 1b, x5, 76,0)
RVTEST_SIGBASE(x1, signature_x1_0)
inst_21:
TEST_BRANCH_OP(beq, x2, x31, x26, -0x1, 0x10000, 0xa, 1b, x1, 0,0)
inst_22:
TEST_BRANCH_OP(beq, x2, x5, x27, 0x4000000, 0x80000, 0x2, 1b, x1, 4,0)
inst_23:
TEST_BRANCH_OP(beq, x2, x23, x29, -0x4001, 0x100000, 0x8, 3f, x1, 8,0)
inst_24:
TEST_BRANCH_OP(beq, x2, x14, x11, -0x1000001, 0x200000, 0x6, 1b, x1, 12,0)
inst_25:
TEST_BRANCH_OP(beq, x2, x27, x7, -0x801, 0x400000, 0x8, 1b, x1, 16,0)
inst_26:
TEST_BRANCH_OP(beq, x2, x10, x8, 0x33333333, 0x800000, 0x80, 3f, x1, 20,0)
inst_27:
TEST_BRANCH_OP(beq, x2, x12, x21, -0x200001, 0x1000000, 0x6, 3f, x1, 24,0)
inst_28:
TEST_BRANCH_OP(beq, x2, x18, x13, -0x20001, 0x2000000, 0x2, 1b, x1, 28,0)
inst_29:
TEST_BRANCH_OP(beq, x2, x9, x5, 0x8000, 0x4000000, 0x20, 3f, x1, 32,0)
inst_30:
TEST_BRANCH_OP(beq, x2, x6, x3, 0x1000000, 0x8000000, 0x10, 3f, x1, 36,0)
inst_31:
TEST_BRANCH_OP(beq, x2, x11, x20, 0x33333333, 0x10000000, 0x4, 3f, x1, 40,0)
inst_32:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x8, 0x20000000, 0x6, 3f, x1, 44,0)
inst_34:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3fffffff, -0x80000000, 0x80, 3f, x1, 52,0)
inst_35:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, -0x2, 0x6, 3f, x1, 56,0)
inst_36:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x200000, -0x3, 0x2, 1b, x1, 60,0)
inst_37:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, -0x5, 0x8, 3f, x1, 64,0)
inst_38:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x1001, -0x9, 0x2, 3f, x1, 68,0)
inst_39:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x80000, -0x11, 0x0, 3f, x1, 72,0)
inst_40:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x20001, -0x21, 0x6, 1b, x1, 76,0)
inst_41:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, -0x41, 0x8, 1b, x1, 80,0)
inst_42:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x400000, -0x81, 0x6, 1b, x1, 84,0)
inst_43:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, -0x101, 0x8, 3f, x1, 88,0)
inst_45:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, -0x1001, 0xa, 1b, x1, 96,0)
inst_47:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x800, -0x4001, 0xa, 1b, x1, 104,0)
inst_48:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x80000000, -0x8001, 0x10, 3f, x1, 108,0)
inst_49:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x1001, -0x10001, 0x8, 1b, x1, 112,0)
inst_50:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, -0x20001, 0x40, 3f, x1, 116,0)
inst_51:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x11, -0x40001, 0x80, 3f, x1, 120,0)
inst_52:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x201, -0x80001, 0xa, 1b, x1, 124,0)
inst_54:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, -0x200001, 0x4, 3f, x1, 132,0)
inst_55:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, -0x400001, 0x10, 3f, x1, 136,0)
inst_56:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x2, -0x800001, 0x80, 3f, x1, 140,0)
inst_58:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x9, -0x2000001, 0x0, 1b, x1, 148,0)
inst_59:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x400, -0x4000001, 0x2, 3f, x1, 152,0)
inst_61:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x1, -0x10000001, 0xa, 1b, x1, 160,0)
inst_62:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2000, -0x20000001, 0x80, 3f, x1, 164,0)
inst_63:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, -0x40000001, 0x4, 3f, x1, 168,0)
inst_64:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x2000001, 0x7fffffff, 0x0, 3f, x1, 172,0)
inst_66:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, -0x55555556, 0x6, 1b, x1, 180,0)
inst_68:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x4, 0x4, 3f, x1, 188,0)
inst_69:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x10, 0x80, 0x80, 3f, x1, 192,0)
inst_70:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x20, 0x3fffffff, 0x6, 3f, x1, 196,0)
inst_71:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x40, 0x1, 0xa, 1b, x1, 200,0)
inst_72:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x100, 0x33333332, 0x8, 3f, x1, 204,0)
inst_74:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4000, -0xa, 0x4, 3f, x1, 212,0)
inst_75:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x10000, -0x8, 0x0, 3f, x1, 216,0)
inst_77:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x40000, -0x1001, 0x20, 3f, x1, 224,0)
inst_80:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x8000000, 0x3, 0x0, 3f, x1, 236,0)
inst_81:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x10000000, 0x8, 0xa, 1b, x1, 240,0)
inst_82:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x40000000, 0x33333333, 0x0, 1b, x1, 244,0)
inst_84:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x9, -0x401, 0x6, 3f, x1, 252,0)
inst_85:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x21, -0x801, 0x0, 3f, x1, 256,0)
inst_86:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x41, 0x400, 0x6, 1b, x1, 260,0)
inst_88:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x401, 0x0, 0x0, 1b, x1, 268,0)
inst_89:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x8001, -0x4, 0x8, 1b, x1, 272,0)
inst_90:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x10001, 0x2, 0xa, 1b, x1, 276,0)
inst_91:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x40001, 0x55555555, 0x8, 3f, x1, 280,0)
inst_93:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x100001, 0x2000000, 0x80, 3f, x1, 288,0)
inst_94:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x800001, 0x20000, 0x40, 3f, x1, 292,0)
inst_95:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x4000001, -0x801, 0x8, 1b, x1, 296,0)
inst_96:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x10000001, -0x1001, 0x0, 1b, x1, 300,0)
inst_97:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x20000001, -0x21, 0x6, 1b, x1, 304,0)
inst_98:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x40000001, -0xa, 0x0, 3f, x1, 308,0)
inst_99:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x7fffffff, -0x40000000, 0x8, 1b, x1, 312,0)
inst_100:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x3, 0x20, 3f, x1, 316,0)
inst_101:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x55555555, 0x2, 1b, x1, 320,0)
inst_102:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, -0x55555556, 0x6, 1b, x1, 324,0)
inst_103:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x5, 0x10, 3f, x1, 328,0)
inst_104:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x33333333, 0x40, 3f, x1, 332,0)
inst_105:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x66666666, 0xa, 1b, x1, 336,0)
inst_106:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, -0xb504, 0x8, 1b, x1, 340,0)
inst_107:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0xb504, 0x0, 3f, x1, 344,0)
inst_108:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x2, 0x40, 3f, x1, 348,0)
inst_109:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x55555554, 0x80, 3f, x1, 352,0)
inst_110:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x0, 0x2, 1b, x1, 356,0)
inst_111:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x4, 0x8, 1b, x1, 360,0)
inst_112:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x33333332, 0xa, 1b, x1, 364,0)
inst_113:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x66666665, 0x4, 1b, x1, 368,0)
inst_114:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0xb503, 0x0, 1b, x1, 372,0)
inst_115:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x55555556, 0x4, 3f, x1, 376,0)
inst_116:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, -0x55555555, 0xa, 1b, x1, 380,0)
inst_117:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x6, 0x10, 3f, x1, 384,0)
inst_118:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0x33333334, 0x40, 3f, x1, 388,0)
inst_120:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, -0xb503, 0x6, 3f, x1, 396,0)
inst_121:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x3, 0xb505, 0x6, 3f, x1, 400,0)
inst_122:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x3, 0x2, 3f, x1, 404,0)
inst_125:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x5, 0x8, 1b, x1, 416,0)
inst_127:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x66666666, 0x20, 3f, x1, 424,0)
inst_128:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, -0xb504, 0x8, 1b, x1, 428,0)
inst_129:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0xb504, 0x0, 1b, x1, 432,0)
inst_130:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x2, 0xa, 1b, x1, 436,0)
inst_132:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x0, 0x6, 3f, x1, 444,0)
inst_133:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x4, 0xa, 1b, x1, 448,0)
inst_136:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0xb503, 0x4, 1b, x1, 460,0)
inst_138:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, -0x55555555, 0x20, 3f, x1, 468,0)
inst_139:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x6, 0x6, 3f, x1, 472,0)
inst_140:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x33333334, 0x10, 3f, x1, 476,0)
inst_141:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0x66666667, 0x20, 3f, x1, 480,0)
inst_142:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, -0xb503, 0x4, 3f, x1, 484,0)
inst_143:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555555, 0xb505, 0x6, 1b, x1, 488,0)
inst_144:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x3, 0x4, 1b, x1, 492,0)
inst_147:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x5, 0x6, 3f, x1, 504,0)
inst_149:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x66666666, 0x80, 3f, x1, 512,0)
inst_150:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, -0xb504, 0x4, 1b, x1, 516,0)
inst_151:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0xb504, 0x4, 1b, x1, 520,0)
inst_152:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x2, 0x4, 1b, x1, 524,0)
inst_153:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x55555554, 0x6, 3f, x1, 528,0)
inst_154:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x0, 0x6, 1b, x1, 532,0)
inst_155:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x4, 0x6, 3f, x1, 536,0)
inst_157:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x66666665, 0x6, 3f, x1, 544,0)
inst_158:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0xb503, 0x20, 3f, x1, 548,0)
inst_159:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x55555556, 0xa, 1b, x1, 552,0)
inst_160:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, -0x55555555, 0x2, 1b, x1, 556,0)
inst_161:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x6, 0x4, 3f, x1, 560,0)
inst_162:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x33333334, 0x2, 1b, x1, 564,0)
inst_163:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0x66666667, 0x40, 3f, x1, 568,0)
inst_165:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555556, 0xb505, 0x8, 3f, x1, 576,0)
inst_166:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x3, 0x4, 3f, x1, 580,0)
inst_167:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x55555555, 0x6, 1b, x1, 584,0)
inst_168:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, -0x55555556, 0x8, 1b, x1, 588,0)
inst_170:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x33333333, 0x80, 3f, x1, 596,0)
inst_171:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x66666666, 0x6, 1b, x1, 600,0)
inst_172:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, -0xb504, 0x8, 3f, x1, 604,0)
inst_173:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0xb504, 0x8, 1b, x1, 608,0)
inst_174:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x2, 0x0, 3f, x1, 612,0)
inst_175:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x55555554, 0x4, 3f, x1, 616,0)
inst_176:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x0, 0x80, 3f, x1, 620,0)
inst_177:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x4, 0x8, 1b, x1, 624,0)
inst_179:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x66666665, 0x0, 1b, x1, 632,0)
inst_180:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0xb503, 0xa, 1b, x1, 636,0)
inst_181:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x55555556, 0x10, 3f, x1, 640,0)
inst_182:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, -0x55555555, 0x10, 3f, x1, 644,0)
inst_183:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x6, 0x8, 1b, x1, 648,0)
inst_184:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x33333334, 0x6, 3f, x1, 652,0)
inst_185:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x5, 0x66666667, 0x10, 3f, x1, 656,0)
inst_189:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x55555555, 0x10, 3f, x1, 672,0)
inst_190:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, -0x55555556, 0x0, 1b, x1, 676,0)
inst_191:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x5, 0x4, 1b, x1, 680,0)
inst_192:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x33333333, 0x10, 3f, x1, 684,0)
inst_193:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x66666666, 0x2, 3f, x1, 688,0)
inst_194:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, -0xb504, 0xa, 1b, x1, 692,0)
inst_197:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x0, 0x40, 3f, x1, 704,0)
inst_198:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x4, 0x2, 3f, x1, 708,0)
inst_199:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x33333332, 0x8, 3f, x1, 712,0)
inst_200:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0x66666665, 0xa, 1b, x1, 716,0)
inst_207:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, -0xb503, 0x8, 1b, x1, 744,0)
inst_208:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333333, 0xb505, 0x8, 1b, x1, 748,0)
inst_209:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x3, 0x0, 1b, x1, 752,0)
inst_210:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x55555555, 0x4, 1b, x1, 756,0)
inst_211:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, -0x55555556, 0x0, 1b, x1, 760,0)
inst_213:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x33333333, 0x2, 3f, x1, 768,0)
inst_214:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x66666666, 0xa, 1b, x1, 772,0)
inst_215:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, -0xb504, 0x6, 3f, x1, 776,0)
inst_216:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0xb504, 0x0, 1b, x1, 780,0)
inst_217:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x2, 0x6, 1b, x1, 784,0)
inst_218:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x55555554, 0x0, 1b, x1, 788,0)
inst_219:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x0, 0x6, 3f, x1, 792,0)
inst_220:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x4, 0x20, 3f, x1, 796,0)
inst_222:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x66666665, 0x2, 3f, x1, 804,0)
inst_223:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0xb503, 0x8, 3f, x1, 808,0)
inst_225:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, -0x55555555, 0x8, 3f, x1, 816,0)
inst_226:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, 0x6, 0x8, 1b, x1, 820,0)
inst_229:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666666, -0xb503, 0x20, 3f, x1, 832,0)
inst_231:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x3, 0x8, 3f, x1, 840,0)
inst_234:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x5, 0x6, 1b, x1, 852,0)
inst_235:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x33333333, 0xa, 1b, x1, 856,0)
inst_236:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x66666666, 0x0, 3f, x1, 860,0)
inst_237:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, -0xb504, 0x4, 3f, x1, 864,0)
inst_238:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0xb504, 0x2, 1b, x1, 868,0)
inst_239:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x2, 0x40, 3f, x1, 872,0)
inst_240:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x55555554, 0x80, 3f, x1, 876,0)
inst_242:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x4, 0x8, 1b, x1, 884,0)
inst_243:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x33333332, 0x0, 1b, x1, 888,0)
inst_245:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0xb503, 0x8, 3f, x1, 896,0)
inst_246:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x55555556, 0x6, 3f, x1, 900,0)
inst_247:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, -0x55555555, 0x0, 1b, x1, 904,0)
inst_248:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x6, 0x10, 3f, x1, 908,0)
inst_249:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x33333334, 0x4, 3f, x1, 912,0)
inst_250:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, 0x66666667, 0x4, 3f, x1, 916,0)
inst_251:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb504, -0xb503, 0xa, 1b, x1, 920,0)
inst_254:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x55555555, 0x20, 3f, x1, 932,0)
inst_255:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x5, 0x6, 3f, x1, 936,0)
inst_256:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x33333333, 0xa, 1b, x1, 940,0)
inst_259:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0xb504, 0x6, 3f, x1, 952,0)
inst_260:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x2, 0x0, 3f, x1, 956,0)
inst_261:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x55555554, 0x2, 1b, x1, 960,0)
inst_262:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x0, 0x4, 1b, x1, 964,0)
inst_263:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x4, 0x6, 3f, x1, 968,0)
inst_264:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x33333332, 0x6, 1b, x1, 972,0)
inst_265:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x66666665, 0x10, 3f, x1, 976,0)
inst_266:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0xb503, 0x8, 1b, x1, 980,0)
inst_267:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x55555556, 0x0, 3f, x1, 984,0)
inst_268:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, -0x55555555, 0x20, 3f, x1, 988,0)
inst_271:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0x66666667, 0x10, 3f, x1, 1000,0)
inst_272:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, -0xb503, 0x6, 3f, x1, 1004,0)
inst_273:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb504, 0xb505, 0x8, 3f, x1, 1008,0)
inst_274:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x3, 0x80, 3f, x1, 1012,0)
inst_275:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x55555555, 0x40, 3f, x1, 1016,0)
inst_278:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x33333333, 0xa, 1b, x1, 1028,0)
inst_280:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, -0xb504, 0x6, 3f, x1, 1036,0)
inst_282:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x2, 0x8, 3f, x1, 1044,0)
inst_283:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x55555554, 0x0, 3f, x1, 1048,0)
inst_285:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x33333332, 0x4, 3f, x1, 1056,0)
inst_286:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x66666665, 0x8, 1b, x1, 1060,0)
inst_287:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0xb503, 0x20, 3f, x1, 1064,0)
inst_288:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x55555556, 0x40, 3f, x1, 1068,0)
inst_290:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x6, 0x40, 3f, x1, 1076,0)
inst_292:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0x66666667, 0x4, 1b, x1, 1084,0)
inst_293:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, -0xb503, 0x8, 3f, x1, 1088,0)
inst_294:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x2, 0xb505, 0x8, 3f, x1, 1092,0)
inst_295:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x3, 0x4, 1b, x1, 1096,0)
inst_296:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x55555555, 0x2, 1b, x1, 1100,0)
inst_297:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, -0x55555556, 0x0, 3f, x1, 1104,0)
inst_298:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x5, 0x6, 3f, x1, 1108,0)
inst_299:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x33333333, 0x2, 1b, x1, 1112,0)
inst_300:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x66666666, 0x2, 1b, x1, 1116,0)
inst_303:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x2, 0x80, 3f, x1, 1128,0)
inst_304:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x55555554, 0x80, 3f, x1, 1132,0)
inst_305:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x0, 0x2, 3f, x1, 1136,0)
inst_306:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x4, 0x8, 1b, x1, 1140,0)
inst_307:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x33333332, 0x6, 3f, x1, 1144,0)
inst_308:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x66666665, 0x20, 3f, x1, 1148,0)
inst_309:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0xb503, 0x2, 1b, x1, 1152,0)
inst_310:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x55555556, 0x4, 1b, x1, 1156,0)
inst_314:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0x66666667, 0x0, 1b, x1, 1172,0)
inst_315:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, -0xb503, 0x0, 1b, x1, 1176,0)
inst_316:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555554, 0xb505, 0x40, 3f, x1, 1180,0)
inst_317:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x3, 0x4, 3f, x1, 1184,0)
inst_318:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x55555555, 0x6, 3f, x1, 1188,0)
inst_320:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x5, 0x40, 3f, x1, 1196,0)
inst_321:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x33333333, 0x40, 3f, x1, 1200,0)
inst_322:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x66666666, 0x2, 1b, x1, 1204,0)
inst_323:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, -0xb504, 0x0, 3f, x1, 1208,0)
inst_324:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0xb504, 0x6, 1b, x1, 1212,0)
inst_326:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x66666667, 0x2, 3f, x1, 1220,0)
inst_331:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, -0x55555556, 0x6, 1b, x1, 1240,0)
inst_333:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x33333333, 0x4, 3f, x1, 1248,0)
inst_335:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, -0xb504, 0x80, 3f, x1, 1256,0)
inst_336:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0xb504, 0x40, 3f, x1, 1260,0)
inst_337:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x2, 0x8, 3f, x1, 1264,0)
inst_339:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x0, 0x6, 1b, x1, 1272,0)
inst_340:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x33333332, 0xa, 1b, x1, 1276,0)
inst_341:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x66666665, 0x4, 3f, x1, 1280,0)
inst_343:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x55555556, 0x6, 1b, x1, 1288,0)
inst_344:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, -0x55555555, 0x8, 3f, x1, 1292,0)
inst_345:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x6, 0x10, 3f, x1, 1296,0)
inst_346:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x33333334, 0x20, 3f, x1, 1300,0)
inst_347:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0x66666667, 0x40, 3f, x1, 1304,0)
inst_348:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, -0xb503, 0x0, 1b, x1, 1308,0)
inst_349:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x6, 0xb505, 0x6, 3f, x1, 1312,0)
inst_350:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x3, 0x2, 3f, x1, 1316,0)
inst_352:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, -0x55555556, 0x4, 1b, x1, 1324,0)
inst_353:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x5, 0x2, 1b, x1, 1328,0)
inst_354:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x33333333, 0x20, 3f, x1, 1332,0)
inst_356:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, -0xb504, 0x8, 1b, x1, 1340,0)
inst_357:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0xb504, 0x2, 1b, x1, 1344,0)
inst_358:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x2, 0x2, 1b, x1, 1348,0)
inst_359:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x55555554, 0x4, 1b, x1, 1352,0)
inst_360:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x0, 0x20, 3f, x1, 1356,0)
inst_361:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x4, 0x8, 3f, x1, 1360,0)
inst_362:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x33333332, 0x0, 3f, x1, 1364,0)
inst_363:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x66666665, 0x2, 1b, x1, 1368,0)
inst_364:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0xb503, 0x4, 1b, x1, 1372,0)
inst_365:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x55555556, 0x0, 3f, x1, 1376,0)
inst_366:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, -0x55555555, 0x8, 3f, x1, 1380,0)
inst_367:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x6, 0x2, 1b, x1, 1384,0)
inst_368:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x33333334, 0x4, 3f, x1, 1388,0)
inst_369:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333334, 0x66666667, 0x8, 1b, x1, 1392,0)
inst_373:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x55555555, 0x4, 1b, x1, 1408,0)
inst_374:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, -0x55555556, 0x2, 1b, x1, 1412,0)
inst_375:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x5, 0x6, 3f, x1, 1416,0)
inst_376:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x33333333, 0x6, 1b, x1, 1420,0)
inst_377:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x66666666, 0x6, 1b, x1, 1424,0)
inst_378:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, -0xb504, 0x0, 3f, x1, 1428,0)
inst_380:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x2, 0x80, 3f, x1, 1436,0)
inst_381:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x55555554, 0x4, 3f, x1, 1440,0)
inst_382:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x0, 0x20, 3f, x1, 1444,0)
inst_384:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x33333332, 0x0, 1b, x1, 1452,0)
inst_386:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0xb503, 0x2, 1b, x1, 1460,0)
inst_389:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x6, 0x4, 3f, x1, 1472,0)
inst_390:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x33333334, 0x20, 3f, x1, 1476,0)
inst_391:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0x66666667, 0x2, 1b, x1, 1480,0)
inst_392:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, -0xb503, 0x8, 1b, x1, 1484,0)
inst_393:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666667, 0xb505, 0x2, 3f, x1, 1488,0)
inst_394:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x3, 0x8, 3f, x1, 1492,0)
inst_395:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x55555555, 0x20, 3f, x1, 1496,0)
inst_396:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, -0x55555556, 0x2, 3f, x1, 1500,0)
inst_397:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x5, 0x6, 1b, x1, 1504,0)
inst_398:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x33333333, 0x40, 3f, x1, 1508,0)
inst_399:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x66666666, 0x6, 1b, x1, 1512,0)
inst_400:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, -0xb504, 0x2, 3f, x1, 1516,0)
inst_401:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0xb504, 0x4, 1b, x1, 1520,0)
inst_402:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x2, 0x40, 3f, x1, 1524,0)
inst_403:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x55555554, 0x4, 3f, x1, 1528,0)
inst_404:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x0, 0x6, 3f, x1, 1532,0)
inst_405:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x4, 0x40, 3f, x1, 1536,0)
inst_408:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0xb503, 0x0, 3f, x1, 1548,0)
inst_409:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x55555556, 0x2, 1b, x1, 1552,0)
inst_410:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, -0x55555555, 0x8, 3f, x1, 1556,0)
inst_411:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x6, 0x6, 1b, x1, 1560,0)
inst_412:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x33333334, 0x80, 3f, x1, 1564,0)
inst_413:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, 0x66666667, 0x80, 3f, x1, 1568,0)
inst_414:
TEST_BRANCH_OP(beq, x2, x10, x11, -0xb503, -0xb503, 0xa, 1b, x1, 1572,0)
inst_416:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x3, 0x8, 1b, x1, 1580,0)
inst_417:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x55555555, 0x0, 1b, x1, 1584,0)
inst_419:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x5, 0x80, 3f, x1, 1592,0)
inst_420:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x33333333, 0x4, 1b, x1, 1596,0)
inst_422:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, -0xb504, 0x10, 3f, x1, 1604,0)
inst_423:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0xb504, 0xa, 1b, x1, 1608,0)
inst_424:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x2, 0x2, 1b, x1, 1612,0)
inst_425:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x55555554, 0x8, 3f, x1, 1616,0)
inst_426:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x0, 0x4, 3f, x1, 1620,0)
inst_427:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x4, 0x4, 3f, x1, 1624,0)
inst_428:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x33333332, 0x8, 1b, x1, 1628,0)
inst_430:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0xb503, 0x0, 3f, x1, 1636,0)
inst_432:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, -0x55555555, 0x10, 3f, x1, 1644,0)
inst_433:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x6, 0x4, 3f, x1, 1648,0)
inst_434:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x33333334, 0x8, 3f, x1, 1652,0)
inst_435:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0x66666667, 0x6, 3f, x1, 1656,0)
inst_437:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb505, 0xb505, 0x4, 3f, x1, 1664,0)
inst_439:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x55555554, 0x2, 3f, x1, 1672,0)
inst_442:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x33333332, 0x2, 1b, x1, 1684,0)
inst_443:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x66666665, 0x10, 3f, x1, 1688,0)
inst_444:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0xb503, 0x2, 3f, x1, 1692,0)
inst_446:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, -0x55555555, 0x0, 1b, x1, 1700,0)
inst_447:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x6, 0x10, 3f, x1, 1704,0)
inst_449:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0x66666667, 0x8, 1b, x1, 1712,0)
inst_451:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x0, 0xb505, 0x0, 1b, x1, 1720,0)
inst_452:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x3, 0x8, 1b, x1, 1724,0)
inst_454:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, -0x55555556, 0x80, 3f, x1, 1732,0)
inst_455:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x5, 0x40, 3f, x1, 1736,0)
inst_457:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x66666666, 0x2, 3f, x1, 1744,0)
inst_459:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0xb504, 0xa, 1b, x1, 1752,0)
inst_460:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x2, 0x8, 1b, x1, 1756,0)
inst_461:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x55555554, 0x0, 1b, x1, 1760,0)
inst_462:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x0, 0x40, 3f, x1, 1764,0)
inst_466:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0xb503, 0x2, 1b, x1, 1780,0)
inst_467:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x55555556, 0x0, 3f, x1, 1784,0)
inst_468:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, -0x55555555, 0x6, 1b, x1, 1788,0)
inst_469:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x6, 0x10, 3f, x1, 1792,0)
inst_471:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, 0x66666667, 0x2, 1b, x1, 1800,0)
inst_472:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x4, -0xb503, 0x10, 3f, x1, 1804,0)
inst_475:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x55555555, 0x0, 3f, x1, 1816,0)
inst_477:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x5, 0x8, 1b, x1, 1824,0)
inst_478:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x33333333, 0x40, 3f, x1, 1828,0)
inst_479:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x66666666, 0x4, 3f, x1, 1832,0)
inst_481:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0xb504, 0x40, 3f, x1, 1840,0)
inst_482:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x2, 0x10, 3f, x1, 1844,0)
inst_484:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x0, 0x8, 1b, x1, 1852,0)
inst_486:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x33333332, 0x8, 3f, x1, 1860,0)
inst_488:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0xb503, 0x0, 1b, x1, 1868,0)
inst_489:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x55555556, 0x10, 3f, x1, 1872,0)
inst_490:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, -0x55555555, 0x6, 3f, x1, 1876,0)
inst_493:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0x66666667, 0x10, 3f, x1, 1888,0)
inst_494:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, -0xb503, 0x8, 1b, x1, 1892,0)
inst_495:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x33333332, 0xb505, 0x8, 1b, x1, 1896,0)
inst_496:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x3, 0x0, 3f, x1, 1900,0)
inst_497:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x55555555, 0x0, 3f, x1, 1904,0)
inst_498:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, -0x55555556, 0x80, 3f, x1, 1908,0)
inst_499:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x5, 0x0, 1b, x1, 1912,0)
inst_500:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x33333333, 0x0, 1b, x1, 1916,0)
inst_501:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x66666666, 0xa, 1b, x1, 1920,0)
inst_502:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, -0xb504, 0x80, 3f, x1, 1924,0)
inst_506:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x0, 0x40, 3f, x1, 1940,0)
inst_507:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x4, 0x8, 1b, x1, 1944,0)
inst_508:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x33333332, 0x20, 3f, x1, 1948,0)
inst_510:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0xb503, 0x8, 3f, x1, 1956,0)
inst_511:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x55555556, 0x80, 3f, x1, 1960,0)
inst_512:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, -0x55555555, 0x0, 3f, x1, 1964,0)
inst_513:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x6, 0x0, 1b, x1, 1968,0)
inst_514:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, 0x33333334, 0x8, 3f, x1, 1972,0)
inst_516:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x66666665, -0xb503, 0x0, 1b, x1, 1980,0)
inst_518:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x3, 0xa, 1b, x1, 1988,0)
inst_519:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x55555555, 0x6, 1b, x1, 1992,0)
inst_520:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, -0x55555556, 0x4, 1b, x1, 1996,0)
inst_521:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x5, 0x40, 3f, x1, 2000,0)
inst_523:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x66666666, 0x2, 1b, x1, 2008,0)
inst_524:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, -0xb504, 0x4, 3f, x1, 2012,0)
inst_526:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x2, 0x4, 3f, x1, 2020,0)
inst_527:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x55555554, 0x8, 3f, x1, 2024,0)
inst_528:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x0, 0xa, 1b, x1, 2028,0)
inst_530:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x33333332, 0x2, 1b, x1, 2036,0)
inst_531:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x66666665, 0x6, 3f, x1, 2040,0)
inst_532:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0xb503, 0x0, 1b, x1, 2044,0)
RVTEST_SIGBASE(x1, signature_x1_1)
inst_533:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x55555556, 0x2, 1b, x1, 0,0)
inst_534:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, -0x55555555, 0x8, 3f, x1, 4,0)
inst_535:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x6, 0x8, 1b, x1, 8,0)
inst_536:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x33333334, 0x40, 3f, x1, 12,0)
inst_537:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0x66666667, 0x0, 3f, x1, 16,0)
inst_539:
TEST_BRANCH_OP(beq, x2, x10, x11, 0xb503, 0xb505, 0x0, 1b, x1, 24,0)
inst_540:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x3, 0x2, 1b, x1, 28,0)
inst_541:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x55555555, 0x6, 3f, x1, 32,0)
inst_542:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, -0x55555556, 0x2, 1b, x1, 36,0)
inst_543:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x5, 0x6, 1b, x1, 40,0)
inst_546:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, -0xb504, 0x0, 3f, x1, 52,0)
inst_548:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x2, 0x4, 3f, x1, 60,0)
inst_549:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x55555554, 0x4, 3f, x1, 64,0)
inst_550:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x0, 0xa, 1b, x1, 68,0)
inst_551:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x4, 0x6, 1b, x1, 72,0)
inst_552:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x33333332, 0x8, 1b, x1, 76,0)
inst_553:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0x66666665, 0x4, 3f, x1, 80,0)
inst_554:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0xb503, 0x6, 1b, x1, 84,0)
inst_556:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, -0x55555555, 0x0, 1b, x1, 92,0)
inst_561:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x55555556, 0xb505, 0x20, 3f, x1, 112,0)
inst_562:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x3, 0x4, 3f, x1, 116,0)
inst_563:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x55555555, 0xa, 1b, x1, 120,0)
inst_564:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, -0x55555556, 0x20, 3f, x1, 124,0)
inst_566:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x33333333, 0x40, 3f, x1, 132,0)
inst_567:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x66666666, 0x6, 3f, x1, 136,0)
inst_568:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, -0xb504, 0x2, 3f, x1, 140,0)
inst_570:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x2, 0x0, 1b, x1, 148,0)
inst_572:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x0, 0x4, 1b, x1, 156,0)
inst_573:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x4, 0x6, 3f, x1, 160,0)
inst_575:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x66666665, 0x40, 3f, x1, 168,0)
inst_576:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0xb503, 0x10, 3f, x1, 172,0)
inst_578:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, -0x55555555, 0x40, 3f, x1, 180,0)
inst_579:
TEST_BRANCH_OP(beq, x2, x10, x11, -0x55555555, 0x6, 0x40, 3f, x1, 184,0)
inst_581:
TEST_BRANCH_OP(beq, x2, x10, x11, 0x20000000, -0xb504, 0x20, 3f, x1, 192,0)
inst_4:
TEST_BRANCH_FWD_OP(beq, x11, x2, x30, -0x201, -0x201, 0x100, x5, 16, signature_x5_1)
inst_13:
TEST_BRANCH_FWD_OP(beq, x11, x15, x24, 0x200, 0x40, 0x100, x5, 52, signature_x5_1)
inst_20:
TEST_BRANCH_FWD_OP(beq, x2, x13, x0, 0x100000, 0x0, 0x100, x5, 80, signature_x5_1)
inst_67:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x1, 0x80000, 0x100, x1, 184, signature_x1_0)
inst_87:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x81, 0x55555555, 0x100, x1, 264, signature_x1_0)
inst_126:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555555, 0x33333333, 0x100, x1, 420, signature_x1_0)
inst_131:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555555, 0x55555554, 0x100, x1, 440, signature_x1_0)
inst_137:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555555, 0x55555556, 0x100, x1, 464, signature_x1_0)
inst_146:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555556, -0x55555556, 0x100, x1, 500, signature_x1_0)
inst_164:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555556, -0xb503, 0x100, x1, 572, signature_x1_0)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
inst_203:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333333, -0x55555555, 0x100, x1, 728, signature_x1_0)
inst_228:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666666, 0x66666667, 0x100, x1, 828, signature_x1_0)
inst_244:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0xb504, 0x66666665, 0x100, x1, 892, signature_x1_0)
inst_257:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb504, 0x66666666, 0x100, x1, 944, signature_x1_0)
inst_270:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb504, 0x33333334, 0x100, x1, 996, signature_x1_0)
inst_284:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x2, 0x0, 0x100, x1, 1052, signature_x1_0)
inst_302:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555554, 0xb504, 0x100, x1, 1124, signature_x1_0)
inst_311:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555554, -0x55555555, 0x100, x1, 1160, signature_x1_0)
inst_379:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666667, 0xb504, 0x100, x1, 1432, signature_x1_0)
inst_387:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666667, 0x55555556, 0x100, x1, 1464, signature_x1_0)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
inst_415:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0xb503, 0xb505, 0x100, x1, 1576, signature_x1_0)
inst_436:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb505, -0xb503, 0x100, x1, 1660, signature_x1_0)
inst_491:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333332, 0x6, 0x100, x1, 1880, signature_x1_0)
inst_504:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666665, 0x2, 0x100, x1, 1932, signature_x1_0)
inst_522:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb503, 0x33333333, 0x100, x1, 2004, signature_x1_0)
inst_529:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb503, 0x4, 0x100, x1, 2032, signature_x1_0)
inst_538:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb503, -0xb503, 0x100, x1, 20, signature_x1_1)
inst_547:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555556, 0xb504, 0x100, x1, 56, signature_x1_1)
inst_569:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555555, 0xb504, 0x100, x1, 144, signature_x1_1)
inst_582:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x100000, 0x8000, 0x100, x1, 196, signature_x1_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x100)
TEST_BRANCH_BWD_RETURNBLOCK(0x400)
inst_0:
TEST_BRANCH_BWD_OP(beq, x11, x19, x19, 0x55555555, 0x55555555, 0x400, x5, 0, signature_x5_1)
inst_12:
TEST_BRANCH_BWD_OP(beq, x11, x16, x18, -0x2001, 0x20, 0x400, x5, 48, signature_x5_1)
inst_44:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x101, -0x801, 0x400, x1, 92, signature_x1_0)
inst_57:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x55555556, -0x1000001, 0x400, x1, 144, signature_x1_0)
inst_60:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x3, -0x8000001, 0x400, x1, 156, signature_x1_0)
inst_76:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x20000, 0x55555555, 0x400, x1, 220, signature_x1_0)
inst_83:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x5, -0xa, 0x400, x1, 248, signature_x1_0)
inst_188:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333333, 0x3, 0x400, x1, 668, signature_x1_0)
inst_202:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333333, 0x55555556, 0x400, x1, 724, signature_x1_0)
inst_212:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666666, 0x5, 0x400, x1, 764, signature_x1_0)
inst_241:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0xb504, 0x0, 0x400, x1, 880, signature_x1_0)
inst_276:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x2, -0x55555556, 0x400, x1, 1020, signature_x1_0)
inst_277:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x2, 0x5, 0x400, x1, 1024, signature_x1_0)
inst_279:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x2, 0x66666666, 0x400, x1, 1032, signature_x1_0)
inst_291:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x2, 0x33333334, 0x400, x1, 1080, signature_x1_0)
inst_301:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555554, -0xb504, 0x400, x1, 1120, signature_x1_0)
inst_332:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x6, 0x5, 0x400, x1, 1244, signature_x1_0)
inst_334:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x6, 0x66666666, 0x400, x1, 1252, signature_x1_0)
inst_351:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333334, 0x55555555, 0x400, x1, 1320, signature_x1_0)
inst_371:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333334, 0xb505, 0x400, x1, 1400, signature_x1_0)
inst_383:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666667, 0x4, 0x400, x1, 1448, signature_x1_0)
inst_448:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x0, 0x33333334, 0x400, x1, 1708, signature_x1_0)
inst_453:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x4, 0x55555555, 0x400, x1, 1728, signature_x1_0)
inst_463:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x4, 0x4, 0x400, x1, 1768, signature_x1_0)
inst_464:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x4, 0x33333332, 0x400, x1, 1772, signature_x1_0)
inst_465:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x4, 0x66666665, 0x400, x1, 1776, signature_x1_0)
inst_503:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666665, 0xb504, 0x400, x1, 1928, signature_x1_0)
inst_505:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666665, 0x55555554, 0x400, x1, 1936, signature_x1_0)
inst_509:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666665, 0x66666665, 0x400, x1, 1952, signature_x1_0)
inst_515:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666665, 0x66666667, 0x400, x1, 1976, signature_x1_0)
inst_525:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0xb503, 0xb504, 0x400, x1, 2016, signature_x1_0)
inst_545:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555556, 0x66666666, 0x400, x1, 48, signature_x1_1)
inst_558:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555556, 0x33333334, 0x400, x1, 100, signature_x1_1)
inst_577:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x55555555, 0x55555556, 0x400, x1, 176, signature_x1_1)
inst_580:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555555, 0x40000, 0x400, x1, 188, signature_x1_1)
inst_65:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x80000, 0x55555555, 0x400, x1, 176, signature_x1_0)
inst_78:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x800000, -0x400001, 0x400, x1, 228, signature_x1_0)
inst_79:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x2000000, -0x41, 0x400, x1, 232, signature_x1_0)
inst_119:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x3, 0x66666667, 0x400, x1, 392, signature_x1_0)
inst_123:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555555, 0x55555555, 0x400, x1, 408, signature_x1_0)
inst_148:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555556, 0x33333333, 0x400, x1, 508, signature_x1_0)
inst_178:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x5, 0x33333332, 0x400, x1, 628, signature_x1_0)
inst_186:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x5, -0xb503, 0x400, x1, 660, signature_x1_0)
inst_201:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333333, 0xb503, 0x400, x1, 720, signature_x1_0)
inst_206:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333333, 0x66666667, 0x400, x1, 740, signature_x1_0)
inst_227:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666666, 0x33333334, 0x400, x1, 824, signature_x1_0)
inst_230:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666666, 0xb505, 0x400, x1, 836, signature_x1_0)
inst_252:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0xb504, 0xb505, 0x400, x1, 924, signature_x1_0)
inst_269:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb504, 0x6, 0x400, x1, 992, signature_x1_0)
inst_313:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555554, 0x33333334, 0x400, x1, 1168, signature_x1_0)
inst_319:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x0, -0x55555556, 0x400, x1, 1192, signature_x1_0)
inst_329:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x6, 0x3, 0x400, x1, 1232, signature_x1_0)
inst_370:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333334, -0xb503, 0x400, x1, 1396, signature_x1_0)
inst_385:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666667, 0x66666665, 0x400, x1, 1456, signature_x1_0)
inst_406:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0xb503, 0x33333332, 0x400, x1, 1540, signature_x1_0)
inst_407:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0xb503, 0x66666665, 0x400, x1, 1544, signature_x1_0)
inst_421:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb505, 0x66666666, 0x400, x1, 1600, signature_x1_0)
inst_438:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x0, 0x2, 0x400, x1, 1668, signature_x1_0)
inst_440:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x0, 0x0, 0x400, x1, 1676, signature_x1_0)
inst_445:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x0, 0x55555556, 0x400, x1, 1696, signature_x1_0)
inst_450:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x0, -0xb503, 0x400, x1, 1716, signature_x1_0)
inst_557:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555556, 0x6, 0x400, x1, 96, signature_x1_1)
inst_574:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555555, 0x33333332, 0x400, x1, 164, signature_x1_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x400)
TEST_BRANCH_BWD_RETURNBLOCK(0x556)
inst_46:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0xa, -0x2001, 0x556, x1, 100, signature_x1_0)
inst_53:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x801, -0x100001, 0x556, x1, 128, signature_x1_0)
inst_73:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x1000, 0x100, 0x556, x1, 208, signature_x1_0)
inst_134:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555555, 0x33333332, 0x556, x1, 452, signature_x1_0)
inst_135:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555555, 0x66666665, 0x556, x1, 456, signature_x1_0)
inst_145:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x55555556, 0x55555555, 0x556, x1, 496, signature_x1_0)
inst_169:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x5, 0x5, 0x556, x1, 592, signature_x1_0)
inst_196:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333333, 0x55555554, 0x556, x1, 700, signature_x1_0)
inst_224:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x66666666, 0x55555556, 0x556, x1, 812, signature_x1_0)
inst_232:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0xb504, 0x55555555, 0x556, x1, 844, signature_x1_0)
inst_258:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0xb504, -0xb504, 0x556, x1, 948, signature_x1_0)
inst_281:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x2, 0xb504, 0x556, x1, 1040, signature_x1_0)
inst_325:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, -0x55555555, 0x33333334, 0x556, x1, 1216, signature_x1_0)
inst_330:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x6, 0x55555555, 0x556, x1, 1236, signature_x1_0)
inst_418:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0xb505, -0x55555556, 0x556, x1, 1588, signature_x1_0)
inst_429:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0xb505, 0x66666665, 0x556, x1, 1632, signature_x1_0)
inst_441:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x0, 0x4, 0x556, x1, 1680, signature_x1_0)
inst_470:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x4, 0x33333334, 0x556, x1, 1796, signature_x1_0)
inst_476:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333332, -0x55555556, 0x556, x1, 1820, signature_x1_0)
inst_483:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333332, 0x55555554, 0x556, x1, 1848, signature_x1_0)
inst_485:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x33333332, 0x4, 0x556, x1, 1856, signature_x1_0)
inst_544:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555556, 0x33333333, 0x556, x1, 44, signature_x1_1)
inst_555:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555556, 0x55555556, 0x556, x1, 88, signature_x1_1)
inst_559:
TEST_BRANCH_BWD_OP(beq, x2, x10, x11, 0x55555556, 0x66666667, 0x556, x1, 104, signature_x1_1)
inst_33:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x8, 0x40000000, 0x200, x1, 48, signature_x1_0)
inst_92:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x80001, -0x41, 0x200, x1, 284, signature_x1_0)
inst_124:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555555, -0x55555556, 0x200, x1, 412, signature_x1_0)
inst_156:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555556, 0x33333332, 0x200, x1, 540, signature_x1_0)
inst_187:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x5, 0xb505, 0x200, x1, 664, signature_x1_0)
inst_195:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333333, 0xb504, 0x200, x1, 696, signature_x1_0)
inst_204:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333333, 0x6, 0x200, x1, 732, signature_x1_0)
inst_205:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333333, 0x33333334, 0x200, x1, 736, signature_x1_0)
inst_221:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666666, 0x33333332, 0x200, x1, 800, signature_x1_0)
inst_233:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0xb504, -0x55555556, 0x200, x1, 848, signature_x1_0)
inst_253:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb504, 0x3, 0x200, x1, 928, signature_x1_0)
inst_289:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x2, -0x55555555, 0x200, x1, 1072, signature_x1_0)
inst_312:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555554, 0x6, 0x200, x1, 1164, signature_x1_0)
inst_327:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555555, -0xb503, 0x200, x1, 1224, signature_x1_0)
inst_328:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555555, 0xb505, 0x200, x1, 1228, signature_x1_0)
inst_338:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x6, 0x55555554, 0x200, x1, 1268, signature_x1_0)
inst_342:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x6, 0xb503, 0x200, x1, 1284, signature_x1_0)
inst_355:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333334, 0x66666666, 0x200, x1, 1336, signature_x1_0)
inst_372:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666667, 0x3, 0x200, x1, 1404, signature_x1_0)
inst_388:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666667, -0x55555555, 0x200, x1, 1468, signature_x1_0)
inst_431:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0xb505, 0x55555556, 0x200, x1, 1640, signature_x1_0)
TEST_BRANCH_FWD_RETURNBLOCK(0x200)
inst_456:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x4, 0x33333333, 0x200, x1, 1740, signature_x1_0)
inst_458:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x4, -0xb504, 0x200, x1, 1748, signature_x1_0)
inst_473:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x4, 0xb505, 0x200, x1, 1808, signature_x1_0)
inst_474:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333332, 0x3, 0x200, x1, 1812, signature_x1_0)
inst_480:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333332, -0xb504, 0x200, x1, 1836, signature_x1_0)
inst_487:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333332, 0x66666665, 0x200, x1, 1864, signature_x1_0)
inst_492:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x33333332, 0x33333334, 0x200, x1, 1884, signature_x1_0)
inst_517:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x66666665, 0xb505, 0x200, x1, 1984, signature_x1_0)
inst_560:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, 0x55555556, -0xb503, 0x200, x1, 108, signature_x1_1)
inst_565:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555555, 0x5, 0x200, x1, 128, signature_x1_1)
inst_571:
TEST_BRANCH_FWD_OP(beq, x2, x10, x11, -0x55555555, 0x55555554, 0x200, x1, 152, signature_x1_1)
TEST_BRANCH_FWD_RETURNBLOCK(0x200)
#endif
RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4

rvtest_data:
.word 0xbabecafe
.word 0xbabecafe
.word 0xbabecafe
.word 0xbabecafe
RVTEST_DATA_END


RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x5_0:
    .fill 0*(XLEN/32),4,0xdeadbeef


signature_x5_1:
    .fill 21*(XLEN/32),4,0xdeadbeef


signature_x1_0:
    .fill 512*(XLEN/32),4,0xdeadbeef


signature_x1_1:
    .fill 50*(XLEN/32),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
